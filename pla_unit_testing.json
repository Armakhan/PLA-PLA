{
    "data": [
        {
            "articleId": 382,
            "articleName": "Appointment Scheduler App Testing",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 3,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JUNIT",
            "video_url": "https://genaiexperiencestorage.blob.core.windows.net/prompt-lib/AppointmentScheduler.mp4?sv=2024-08-04&st=2025-02-27T13%3A54%3A21Z&se=2025-08-26T13%3A54%3A21Z&sr=b&sp=r&sig=8XyE%2B9arCOwYUlHvJ9RTb%2Fg0MIGmpeIskreD99aRPRM%3D",
            "video_id": 379,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 576,
                    "Prompt": " public void updateAppointment(int id, String title, String description, String date) {\n                    Appointment appointment = appointments.get(id);\n                    if (appointment != null) {\n                        appointment.title = title;\n                        appointment.description = description;\n                        appointment.date = date;\n                    }\n                }\n\n              public void cancelAppointment(int id) {\n                    appointments.remove(id);\n                }\n            }\n\n          public class Main {\n                public static void main(String[] args) {\n                    AppointmentService service = new AppointmentService();\n                    Scanner scanner = new Scanner(System.in);\n\n                  while (true) {\n                        System.out.println(\"1. Schedule Appointment\\n2. View\n            Appointment\\n3. Update Appointment\\n4. Cancel Appointment\\n5. Exit\");\n                        int choice = scanner.nextInt();\n\n                      switch (choice) {\n                            case 1:\n                                System.out.println(\"Enter id, title,\n            description, date:\");\n                                int id = scanner.nextInt();\n                                String title = scanner.next();\n                                String description = scanner.next();\n                                String date = scanner.next();\n                                service.addAppointment(new Appointment(id,\n            title, description, date));\n                                break;\n                            case 2:\n                                System.out.println(\"Enter\n            id:\");\n                                id = scanner.nextInt();\n                                Appointment appointment =\n            service.getAppointment(id);\n                                if (appointment != null) {\n                                   \n            System.out.println(\"Title: \" + appointment.title + \", Description: \" + appointment.description\n            + \", Date: \" + appointment.date);\n                                } else {\n                                   \n            System.out.println(\"Appointment not found\");\n                                }\n                                break;\n                            case 3:\n                                System.out.println(\"Enter id, new\n            title, new description, new date:\");\n                                id = scanner.nextInt();\n                                title = scanner.next();\n                                description = scanner.next();\n                                date = scanner.next();\n                                service.updateAppointment(id, title,\n            description, date);\n                                break;\n                            case 4:\n                                System.out.println(\"Enter\n            id:\");\n                                id = scanner.nextInt();\n                                service.cancelAppointment(id);\n                                break;\n                            case 5:\n                                scanner.close();\n                                System.exit(0);\n                        }\n                    }\n                }\n            }\n          Write the Junit Test Cases for the above code.",
                    "PromptType": "Code",
                    "lang": "java",
                    "PromptDesc": [],
                    "Code": [
                        {
                            "code": "\"          package com.example.Testing;\\n\\n          import java.util.*;\\n\\n          class Appointment {\\n                int id;\\n                String title;\\n                String description;\\n                String date;\\n\\n              public Appointment(int id, String title, String description, String date) {\\n                    this.id = id;\\n                    this.title = title;\\n                    this.description = description;\\n                    this.date = date;\\n                }\\n            }\\n\\n          class AppointmentService {\\n                private HashMap<Integer, Appointment> appointments = new HashMap<>();\\n\\n              public void addAppointment(Appointment appointment) {\\n                    appointments.put(appointment.id, appointment);\\n                }\\n\\n              public Appointment getAppointment(int id) {\\n                    return appointments.get(id);\\n                }\\n\\n              public void updateAppointment(int id, String title, String description, String date) {\\n                    Appointment appointment = appointments.get(id);\\n                    if (appointment != null) {\\n                        appointment.title = title;\\n                        appointment.description = description;\\n                        appointment.date = date;\\n                    }\\n                }\\n\\n              public void cancelAppointment(int id) {\\n                    appointments.remove(id);\\n                }\\n            }\\n\\n          public class Main {\\n                public static void main(String[] args) {\\n                    AppointmentService service = new AppointmentService();\\n                    Scanner scanner = new Scanner(System.in);\\n\\n                  while (true) {\\n                        System.out.println(\\\"1. Schedule Appointment\\\\n2. View\\n            Appointment\\\\n3. Update Appointment\\\\n4. Cancel Appointment\\\\n5. Exit\\\");\\n                        int choice = scanner.nextInt();\\n\\n                      switch (choice) {\\n                            case 1:\\n                                System.out.println(\\\"Enter id, title,\\n            description, date:\\\");\\n                                int id = scanner.nextInt();\\n                                String title = scanner.next();\\n                                String description = scanner.next();\\n                                String date = scanner.next();\\n                                service.addAppointment(new Appointment(id,\\n            title, description, date));\\n                                break;\\n                            case 2:\\n                                System.out.println(\\\"Enter\\n            id:\\\");\\n                                id = scanner.nextInt();\\n                                Appointment appointment =\\n            service.getAppointment(id);\\n                                if (appointment != null) {\\n                                   \\n            System.out.println(\\\"Title: \\\" + appointment.title + \\\", Description: \\\" + appointment.description\\n            + \\\", Date: \\\" + appointment.date);\\n                                } else {\\n                                   \\n            System.out.println(\\\"Appointment not found\\\");\\n                                }\\n                                break;\\n                            case 3:\\n                                System.out.println(\\\"Enter id, new\\n            title, new description, new date:\\\");\\n                                id = scanner.nextInt();\\n                                title = scanner.next();\\n                                description = scanner.next();\\n                                date = scanner.next();\\n                                service.updateAppointment(id, title,\\n            description, date);\\n                                break;\\n                            case 4:\\n                                System.out.println(\\\"Enter\\n            id:\\\");\\n                                id = scanner.nextInt();\\n                                service.cancelAppointment(id);\\n                                break;\\n                            case 5:\\n                                scanner.close();\\n                                System.exit(0);\\n                        }\\n                    }\\n                }\\n            }\\n            \"",
                            "id": 929
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 383,
            "articleName": "Creating a Simple Unit Test",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 3,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JUNIT",
            "video_url": null,
            "video_id": 380,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 578,
                    "Prompt": "I need JUnit 5 tests and Mockito for this model:\n  @Data\n  public class GroupsModel {\n      private Integer id;\n      private String groupName;\n      private List<String> members;\n      private String admin;\n      @JsonInclude(JsonInclude.Include.NON_NULL)\n      private String newGroupName;\n      @JsonInclude(JsonInclude.Include.NON_NULL)\n      private String user;\n      @JsonInclude(JsonInclude.Include.NON_NULL)\n      private String token;\n\n      public GroupsModel() {}\n\n      public GroupsModel(GroupsEntity groupsEntity) {\n          this.id = groupsEntity.getId();\n          this.groupName = groupsEntity.getGroupName();\n          this.admin = groupsEntity.getAdmin();\n      }\n  }\n",
                    "PromptType": "Code",
                    "lang": "java",
                    "PromptDesc": [
                        {
                            "desc": "Here's an example of how you could write unit tests using JUnit 5 and Mockito for the GroupsModel class. Let's assume you have a GroupsEntity interface that represents the underlying entity providing the data. We'll use Mockito to simulate the behavior of this interface in the tests.\n\nFirst, make sure to add the JUnit 5 and Mockito dependencies to your project if they're not already present.\n\n",
                            "id": 785
                        }
                    ],
                    "Code": [
                        {
                            "code": "\"  import org.junit.jupiter.api.Test;\\n  import org.junit.jupiter.api.BeforeEach;\\n  import org.mockito.Mock;\\n  import org.mockito.MockitoAnnotations;\\n  import static org.mockito.Mockito.*;\\n  import static org.junit.jupiter.api.Assertions.*;\\n\\n  public class GroupsModelTest {\\n\\n      @Mock\\n      private GroupsEntity mockGroupsEntity;\\n\\n      @BeforeEach\\n      public void setUp() {\\n          MockitoAnnotations.openMocks(this);\\n      }\\n\\n      @Test\\n      public void testConstructorFromEntity() {\\n          when(mockGroupsEntity.getId()).thenReturn(1);\\n          when(mockGroupsEntity.getGroupName()).thenReturn(\\\"TestGroup\\\");\\n          when(mockGroupsEntity.getAdmin()).thenReturn(\\\"AdminUser\\\");\\n\\n          GroupsModel groupsModel = new GroupsModel(mockGroupsEntity);\\n\\n          assertEquals(1, groupsModel.getId());\\n          assertEquals(\\\"TestGroup\\\", groupsModel.getGroupName());\\n          assertEquals(\\\"AdminUser\\\", groupsModel.getAdmin());\\n\\n          // Verify that the methods on the mock have been called\\n          verify(mockGroupsEntity, times(1)).getId();\\n          verify(mockGroupsEntity, times(1)).getGroupName();\\n          verify(mockGroupsEntity, times(1)).getAdmin();\\n      }\\n  }\\nPlease note that this test focuses on the constructor GroupsModel(GroupsEntity groupsEntity) and verifies whether the fields of the model are correctly set from the methods of the simulated entity (mockGroupsEntity). You can adapt these tests according to your needs and add more tests for other methods or scenarios of the GroupsModel class.\"",
                            "id": 931
                        }
                    ]
                },
                {
                    "PromptId": 579,
                    "Prompt": "The Mockito extension is missing, and the 'public' keyword in the class is not necessary in the test",
                    "PromptType": null,
                    "lang": "java",
                    "PromptDesc": [],
                    "Code": [
                        {
                            "code": "\"I apologize for that. You are right, the 'public' modifier is not necessary in the test class. And if you are using a separate file for the test class, you don't need the 'public class' declaration in the test file.\\n\\nHere is the corrected version of the test file:\\n  import org.junit.jupiter.api.Test;\\n  import org.junit.jupiter.api.BeforeEach;\\n  import org.mockito.Mock;\\n  import org.mockito.MockitoAnnotations;\\n  import org.mockito.junit.jupiter.MockitoExtension;\\n  import static org.mockito.Mockito.*;\\n  import static org.junit.jupiter.api.Assertions.*;\\n  import org.junit.jupiter.api.extension.ExtendWith;\\n\\n  @ExtendWith(MockitoExtension.class)\\n  class GroupsModelTest {\\n\\n      @Mock\\n      private GroupsEntity mockGroupsEntity;\\n\\n      @BeforeEach\\n      void setUp() {\\n          MockitoAnnotations.openMocks(this);\\n      }\\n\\n      @Test\\n      void testConstructorFromEntity() {\\n          when(mockGroupsEntity.getId()).thenReturn(1);\\n          when(mockGroupsEntity.getGroupName()).thenReturn(\\\"TestGroup\\\");\\n          when(mockGroupsEntity.getAdmin()).thenReturn(\\\"AdminUser\\\");\\n\\n          GroupsModel groupsModel = new GroupsModel(mockGroupsEntity);\\n\\n          assertEquals(1, groupsModel.getId());\\n          assertEquals(\\\"TestGroup\\\", groupsModel.getGroupName());\\n          assertEquals(\\\"AdminUser\\\", groupsModel.getAdmin());\\n\\n          // Verify that the methods on the mock have been called\\n          verify(mockGroupsEntity, times(1)).getId();\\n          verify(mockGroupsEntity, times(1)).getGroupName();\\n          verify(mockGroupsEntity, times(1)).getAdmin();\\n      }\\n  }\\nIf you have any other questions or need further assistance, feel free to ask.\"",
                            "id": 932
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 485,
            "articleName": "Creating Complex Unit Tests",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 3,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JUNIT",
            "video_url": null,
            "video_id": 482,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 862,
                    "Prompt": "I'm going to provide you with context\n because I need you to understand the functionality well for\n the next test I'm going to ask you.",
                    "PromptType": null,
                    "lang": "plaintext",
                    "PromptDesc": [
                        {
                            "desc": "TIP: After several tests,\n it is concluded that for the more complex tests,\n such as those of the controllers, it is better to provide the necessary context and approach the test for the successful scenario of the most complex use case of the controller.\nWith this method, once the test is adapted and the correct compilation is achieved, there should be no problems in tackling the rest.",
                            "id": 1076
                        }
                    ],
                    "Code": [
                        {
                            "code": "\"Of course! I'm here to help. \\nPlease provide the context you need me to understand so that I can make sure\\n I grasp it correctly and provide you with the best support for your next test. I'm here to answer your questions and assist you in whatever you need. \\nGo ahead, provide the context you consider relevant.\"",
                            "id": 1336
                        }
                    ]
                },
                {
                    "PromptId": 863,
                    "Prompt": "I have this controller:\n@RestController\n@RequestMapping(\"/users\")\npublic class UsersController implements SpecialResponseInterface {\nprivate final UsersService usersService;\n\n@Autowired\npublic UsersController(UsersService usersService) {\n  this.usersService = usersService;\n}\n}\nJava\n***don't return anything yet",
                    "PromptType": null,
                    "lang": "java",
                    "PromptDesc": [],
                    "Code": [
                        {
                            "code": "\"I understand that you have a controller named UsersController that is mapped to the \\\"/users\\\"\\n path and uses the UsersService through dependency injection.\\n\\nHow can I specifically assist you regarding this controller? Do you have a specific test scenario in mind or any\\n particular functionality you want to implement in this controller? Please provide me with more details \\nso that I can offer you accurate assistance.\"",
                            "id": 1337
                        }
                    ]
                },
                {
                    "PromptId": 864,
                    "Prompt": "I have this Entity:\n@Data\n@Entity\n@Table(name = \"users\")\npublic class UsersEntity {\n@Id\n@Column(name = \"id\")\n@GeneratedValue(strategy=GenerationType.IDENTITY)\nprivate Integer id;\n@Column(name = \"user\")\nprivate String user;\n@Column(name = \"password\")\nprivate String password;\n@Column(name = \"email\")\nprivate String email;\n@Column(name = \"gender\")\nprivate String gender;\n@Column(name = \"photo\")\nprivate String photo;\n@Column(name = \"token\")\nprivate String token;\n\npublic UsersEntity() {}\n\npublic UsersEntity(UsersModel usersModel) {\n  this.user = usersModel.getUser();\n  this.password = usersModel.getPassword();\n  this.email = usersModel.getEmail();\n  this.gender = usersModel.getGender();\n  this.photo = usersModel.getPhoto();\n}\n}\nJava\n***don't return anything yet",
                    "PromptType": null,
                    "lang": "java",
                    "PromptDesc": [],
                    "Code": [
                        {
                            "code": "\"Understood, you have an entity named UsersEntity that maps to a database table called \\\"users\\\". \\nThis entity has several fields that represent user properties, such as username, password, email, gender, photo, and token.\\nHow can I assist you regarding this entity? \\nAre you looking to create a method in the UsersController that interacts with this entity, or do you have a specific testing scenario in mind that you'd like to address? Please provide more details \\nso that I can offer you the assistance you need.\"",
                            "id": 1338
                        }
                    ]
                },
                {
                    "PromptId": 865,
                    "Prompt": "I have this Model:\n@Data\npublic class UsersModel {\nprivate Integer id;\nprivate String user;\nprivate String password;\nprivate String email;\nprivate String gender;\nprivate String photo;\nprivate String token;\n@JsonInclude(JsonInclude.Include.NON_NULL)\nprivate Integer page;\n@JsonInclude(JsonInclude.Include.NON_NULL)\nprivate Integer elements;\n@JsonInclude(JsonInclude.Include.NON_NULL)\nprivate String matcher;\n@JsonInclude(JsonInclude.Include.NON_NULL)\nprivate String newUser;\n@JsonInclude(JsonInclude.Include.NON_NULL)\nprivate String newPassword;\n@JsonInclude(JsonInclude.Include.NON_NULL)\nprivate List<String> usersList;\n}\nJava\n***don't return anything yet",
                    "PromptType": null,
                    "lang": "java",
                    "PromptDesc": [],
                    "Code": [
                        {
                            "code": "\"I understand that you have a model called UsersModel that represents \\nuser properties, including fields like username, password, email, gender, photo, token, and some additional fields for pagination and other functionalities.\\n\\nHow can I assist you specifically in relation to this model? Do you have a testing scenario in mind \\nor any functionality you want to implement in the UsersController controller related to this model? \\nPlease provide more details so that I can offer you accurate assistance.\"",
                            "id": 1339
                        }
                    ]
                },
                {
                    "PromptId": 866,
                    "Prompt": "And I have this repository port:\ncopy\n\n@Repository\npublic class UsersRepositoryAdapter implements UsersRepositoryPort {\nprivate final UsersRepository usersRepository;\n\npublic UsersRepositoryAdapter(UsersRepository usersRepository) {\n  this.usersRepository = usersRepository;\n}\n\n@Override\npublic boolean checkAuthorization(String user, String token) {\n  return usersRepository.checkAuthorization(user, token);\n}\n\n@Override\npublic boolean checkEmail(String email) {\n  return usersRepository.checkEmail(email);\n}\n\n@Override\npublic boolean checkUser(String user) {\n  return usersRepository.checkUser(user);\n}\n\n@Override\npublic void createUser(UsersEntity usersEntity) {\n  usersRepository.save(usersEntity);\n}\n\n@Override\npublic void deleteUser(Integer id) {\n  usersRepository.deleteById(id);\n}\n\n@Override\npublic void editUser(UsersEntity usersEntity) {\n  usersRepository.save(usersEntity);\n}\n\n@Override\npublic List<String> getAllUsers() {\n  return usersRepository.getAllUsers();\n}\n\n@Override\npublic UsersEntity getUserByName(String user) {\n  return usersRepository.getUserByName(user);\n}\n\n@Override\npublic List<String> getUsersByMatch(String matcher) {\n  return usersRepository.getUsersByNameMatch(matcher);\n}\n\n@Override\npublic List<UsersEntity> getUsersDatabase() {\n  return usersRepository.findAll();\n}\n\n@Override\npublic boolean login(String user, String password) {\n  return usersRepository.checkLogin(user, password);\n}\n}\nJava\n***don't return anything yet",
                    "PromptType": null,
                    "lang": "java",
                    "PromptDesc": [],
                    "Code": [
                        {
                            "code": "\"I understand that you have a repository adapter called UsersRepositoryAdapter that implements \\nthe UsersRepositoryPort interface. \\nThis adapter is responsible for interacting with the users repository (UsersRepository) and \\nprovides implementations for various methods related to user management, such as authorization verification, email checking, user creation, editing and deletion, retrieving users by name, \\nperforming user searches, and handling login.\\nHow can I specifically assist you in relation to this repository adapter?\\n Do you need help with the implementation of a particular method or with any testing related to this adapter in the context of your controller and model? Please provide more details so that I can offer you precise assistance.\"",
                            "id": 1340
                        }
                    ]
                },
                {
                    "PromptId": 867,
                    "Prompt": "I also have this specialized class for responses:\npublic final class SpecialResponse {\nprivate final Object entity;\nprivate final String message;\n\npublic SpecialResponse(Object entity, String message) {\nthis.entity = entity;\nthis.message = message;\n}\n\npublic Object getEntity() {\nreturn entity;\n}\n\npublic String getMessage() {\nreturn message;\n}\n}\nJava\n***don't return anything yet",
                    "PromptType": null,
                    "lang": "java",
                    "PromptDesc": [
                        {
                            "desc": "NOTE: Now that we have provided the necessary context, we proceed to request the test.",
                            "id": 1077
                        }
                    ],
                    "Code": [
                        {
                            "code": "\"Understood, you have a SpecialResponse class that is used to encapsulate an entity and a message into a special response.\\n In what specific aspect do you need assistance regarding this class in relation to the controller, repository adapter, and model you mentioned earlier? Do you want me to help you integrate this class into the controller or in the tests? Please provide more details so I can provide you with the appropriate assistance.\"",
                            "id": 1341
                        }
                    ]
                },
                {
                    "PromptId": 868,
                    "Prompt": "I need the test for the success case of:\n@PutMapping(\"/editUser\")\npublic ResponseEntity<SpecialResponse> editUser(@RequestBody UsersModel usersModel) {\nJSONObject responseJson = new JSONObject();\nusersService.editUser(usersModel);\nresponseJson.put(\"message\", \"User modified successfully\");\nreturn new ResponseEntity<>(specialResponse(null, responseJson), HttpStatus.OK);\n}\nJava\nThe use case is:\n\n@Service\n@Transactional\npublic class EditUserUseCaseImpl implements EditUserUseCase {\nprivate final UsersRepositoryPort usersRepositoryPort;\n\npublic EditUserUseCaseImpl(UsersRepositoryPort usersRepositoryPort) {\n  this.usersRepositoryPort = usersRepositoryPort;\n}\n\n@Override\npublic void editUser(UsersModel usersModel) {\n  if(usersModel.getUser().isBlank() || usersModel.getPassword().isBlank()\n          || usersModel.getToken().isBlank()) {\n      throw new EditUserException(\"All data is required to edit a user\");\n  }\n\n  if(Boolean.FALSE.equals(usersRepositoryPort.checkAuthorization(usersModel.getUser(), usersModel.getToken()))) {\n      throw new EditUserException(\"Unauthorized user\");\n  }\n\n  if((usersModel.getNewUser() == null || usersModel.getNewUser().isBlank())\n          && (usersModel.getNewPassword() == null || usersModel.getNewPassword().isBlank())) {\n      throw new EditUserException(\"There are no values to update\");\n  }\n\n  if(Boolean.TRUE.equals(usersRepositoryPort.checkUser(usersModel.getNewUser().strip()))) {\n      throw new EditUserException(\"The new username already exists\");\n  }\n\n  UsersEntity userEntity = usersRepositoryPort.getUserByName(usersModel.getUser());\n\n  if(usersModel.getNewUser() != null && !usersModel.getNewUser().isBlank()) {\n      userEntity.setUser(usersModel.getNewUser().strip());\n  }\n\n  if(usersModel.getNewPassword() != null && !usersModel.getNewPassword().isBlank()) {\n      String hashedPassword = DigestUtils.sha256Hex(usersModel.getNewPassword());\n      userEntity.setPassword(hashedPassword);\n  }\n\n  if(usersModel.getGender() != null && !usersModel.getGender().isBlank()) {\n      userEntity.setGender(usersModel.getGender());\n  }\n\n  if(usersModel.getPhoto() != null && !usersModel.getPhoto().isBlank()) {\n      userEntity.setPhoto(usersModel.getPhoto());\n  }\n\n  String token = DigestUtils.sha256Hex(userEntity.getUser()+userEntity.getPassword()+userEntity.getId());\n  userEntity.setToken(token);\n\n  usersRepositoryPort.editUser(userEntity);\n}\n}\n",
                    "PromptType": null,
                    "lang": "java",
                    "PromptDesc": [
                        {
                            "desc": "Here's an example of how you could write a test for the success case of the editUser method in the controller, along with associated components like the repository adapter, use case, and model:\n",
                            "id": 1078
                        }
                    ],
                    "Code": [
                        {
                            "code": "\"\\nimport static org.mockito.Mockito.*;\\n\\n@ExtendWith(MockitoExtension.class)\\nclass UsersControllerTest {\\n\\n@InjectMocks\\nprivate UsersController usersController;\\n\\n@Mock\\nprivate UsersService usersService;\\n\\n@Test\\nvoid testEditUserSuccess() {\\n  // Arrange\\n  UsersModel usersModel = new UsersModel();\\n  usersModel.setUser(\\\"existingUser\\\");\\n  usersModel.setNewUser(\\\"newUser\\\");\\n  usersModel.setNewPassword(\\\"newPassword\\\");\\n  usersModel.setGender(\\\"Male\\\");\\n  usersModel.setPhoto(\\\"newPhoto\\\");\\n  usersModel.setToken(\\\"validToken\\\");\\n\\n  UsersEntity existingUserEntity = new UsersEntity();\\n  existingUserEntity.setId(1);\\n  existingUserEntity.setUser(\\\"existingUser\\\");\\n  existingUserEntity.setPassword(\\\"hashedPassword\\\");\\n  existingUserEntity.setGender(\\\"Female\\\");\\n  existingUserEntity.setPhoto(\\\"oldPhoto\\\");\\n  existingUserEntity.setToken(\\\"validToken\\\");\\n\\n  when(usersService.editUser(usersModel)).thenReturn(existingUserEntity);\\n\\n  // Act\\n  ResponseEntity<SpecialResponse> response = usersController.editUser(usersModel);\\n\\n  // Assert\\n  assertEquals(HttpStatus.OK, response.getStatusCode());\\n  SpecialResponse specialResponse = response.getBody();\\n  assertNotNull(specialResponse);\\n  assertNull(specialResponse.getEntity());\\n\\n  JSONObject expectedJson = new JSONObject();\\n  expectedJson.put(\\\"message\\\", \\\"User modified successfully\\\");\\n  JSONAssert.assertEquals(expectedJson.toString(), specialResponse.getMessage(), JSONCompareMode.LENIENT);\\n}\\n}\\n\"",
                            "id": 1342
                        }
                    ]
                },
                {
                    "PromptId": 869,
                    "Prompt": "Sure, this is what I'm looking for. Please stick as closely as possible to this test template for the following requests.",
                    "PromptType": null,
                    "lang": "java",
                    "PromptDesc": [],
                    "Code": [
                        {
                            "code": "\"Understood, I'll be glad to continue using that test template for the upcoming requests. Please go ahead and let me know what else you need me to adapt following that pattern. I'm here to assist you.\\nThe advantage of this approach becomes evident from this point, where we can easily tackle the remaining tests. The previous prompt instructing to adhere to the previous test template or use it as a template for the rest of the tests is essential.\"",
                            "id": 1343
                        }
                    ]
                },
                {
                    "PromptId": 870,
                    "Prompt": "I need the test for the success case of:\n@PostMapping(\"/login\")\npublic ResponseEntity<<SpecialResponse> login(@RequestBody UsersModel usersModel) {\nJSONObject responseJson = new JSONObject();\nString token = usersService.login(usersModel);\nresponseJson.put(\"message\", \"Login successful\");\nreturn new ResponseEntity<>(specialResponse(token, responseJson), HttpStatus.OK);\n}\nThe use case is:\n\n@Service\n@Transactional(readOnly = true)\npublic class LoginUseCaseImpl implements LoginUseCase {\nprivate final UsersRepositoryPort usersRepositoryPort;\n\npublic LoginUseCaseImpl(UsersRepositoryPort usersRepositoryPort) {\n  this.usersRepositoryPort = usersRepositoryPort;\n}\n\n@Override\npublic String login(UsersModel usersModel) {\n  if (usersModel.getUser().isBlank() || usersModel.getPassword().isBlank()) {\n      throw new LoginException(\"User and password are required to login\");\n  }\n\n  if (Boolean.FALSE.equals(usersRepositoryPort.login(usersModel.getUser(), DigestUtils.sha256Hex(usersModel.getPassword())))) {\n      throw new LoginException(\"Login failed\");\n  }\n\n  UsersEntity usersEntity = usersRepositoryPort.getUserByName(usersModel.getUser());\n\n  if(usersEntity == null) {\n      throw new LoginException(\"User not found\");\n  }\n\n  return usersEntity.getToken();\n}\n}",
                    "PromptType": null,
                    "lang": "java",
                    "PromptDesc": [
                        {
                            "desc": "Here's an example of how you could write a test for the success case of the editUser method in the controller, along with the associated components such as the repository adapter, use case, and model:",
                            "id": 1079
                        }
                    ],
                    "Code": [
                        {
                            "code": "\"\\n\\n@Test\\nvoid testLoginSuccess() {\\n// Arrange\\nUsersModel usersModel = new UsersModel();\\nusersModel.setUser(\\\"testUser\\\");\\nusersModel.setPassword(\\\"testPassword\\\");\\n\\nString validToken = \\\"validToken\\\";\\nwhen(usersService.login(usersModel)).thenReturn(validToken);\\n\\nString expectedMessage = \\\"Login successful\\\";\\n\\n// Act\\nResponseEntity actualResponse = usersController.login(usersModel);\\n\\n// Assert\\nassertEquals(HttpStatus.OK, actualResponse.getStatusCode());\\nSpecialResponse specialResponse = actualResponse.getBody();\\nassertNotNull(specialResponse);\\nassertEquals(expectedMessage, specialResponse.getMessage());\\nassertEquals(validToken, specialResponse.getEntity());\\n\\nverify(usersService, times(1)).login(usersModel);\\n}\\nPlease let me know if there's anything else I can assist you with.\"",
                            "id": 1344
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 487,
            "articleName": "Customer Relationship Management App Testing",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 3,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JUNIT",
            "video_url": "https://genaiexperiencestorage.blob.core.windows.net/prompt-lib/CustomerRelationshipManagement.mp4?sv=2024-08-04&st=2025-02-27T13%3A54%3A38Z&se=2025-08-26T13%3A54%3A38Z&sr=b&sp=r&sig=HscZ%2BAxQ9nLE76U9IPNJVJBjbUO2%2BoJy3qE8t798yCI%3D",
            "video_id": 484,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 603,
                    "Prompt": "            package com.example.Testing;\n\n            import java.util.*;\n\n            class Customer {\n                int id;\n                String name;\n                String email;\n                String phone;\n\n                public Customer(int id, String name, String email, String phone) {\n                    this.id = id;\n                    this.name = name;\n                    this.email = email;\n                    this.phone = phone;\n                }\n            }\n\n            class CustomerService {\n                private HashMap<Integer, Customer> customers = new HashMap<>();\n\n                public void addCustomer(Customer customer) {\n                    customers.put(customer.id, customer);\n                }\n\n                public Customer getCustomer(int id) {\n                    return customers.get(id);\n                }\n\n                public void updateCustomer(int id, String name, String email, String phone) {\n                    Customer customer = customers.get(id);\n                    if (customer != null) {\n                        customer.name = name;\n                        customer.email = email;\n                        customer.phone = phone;\n                    }\n                }\n\n                public void deleteCustomer(int id) {\n                    customers.remove(id);\n                }\n            }\n\n            public class Main {\n                public static void main(String[] args) {\n                    CustomerService service = new CustomerService();\n                    Scanner scanner = new Scanner(System.in);\n\n                    while (true) {\n                        System.out.println(\"1. Add Customer\\n2. View Customer\\n3. Update Customer\\n4. Delete Customer\\n5. Exit\");\n                        int choice = scanner.nextInt();\n\n                        switch (choice) {\n                            case 1:\n                                System.out.println(\"Enter id, name, email, phone:\");\n                                int id = scanner.nextInt();\n                                String name = scanner.next();\n                                String email = scanner.next();\n                                String phone = scanner.next();\n                                service.addCustomer(new Customer(id, name, email, phone));\n                                break;\n                            case 2:\n                                System.out.println(\"Enter id:\");\n                                id = scanner.nextInt();\n                                Customer customer = service.getCustomer(id);\n                                if (customer != null) {\n                                    System.out.println(\"Name: \" + customer.name + \", Email: \" + customer.email + \", Phone: \" + customer.phone);\n                                } else {\n                                    System.out.println(\"Customer not found\");\n                                }\n                                break;\n                            case 3:\n                                System.out.println(\"Enter id, new name, new email, new phone:\");\n                                id = scanner.nextInt();\n                                name = scanner.next();\n                                email = scanner.next();\n                                phone = scanner.next();\n                                service.updateCustomer(id, name, email, phone);\n                                break;\n                            case 4:\n                                System.out.println(\"Enter id:\");\n                                id = scanner.nextInt();\n                                service.deleteCustomer(id);\n                                break;\n                            case 5:\n                                scanner.close();\n                                System.exit(0);\n                        }\n                    }\n                }\n            }\nWrite the Junit Test Cases for the above code.\n             \n\n  ",
                    "PromptType": "Code",
                    "lang": "java",
                    "PromptDesc": [],
                    "Code": [
                        {
                            "code": "\"package com.example.Testing;\\n        import org.junit.jupiter.api.BeforeEach;\\n        import org.junit.jupiter.api.Test;\\n        import static org.junit.jupiter.api.Assertions.*;\\n        \\n        class CustomerServiceTest {\\n            private CustomerService customerService;\\n        \\n            @BeforeEach\\n            void setUp() {\\n                customerService = new CustomerService();\\n            }\\n        \\n            @Test\\n            void testAddCustomer() {\\n                Customer customer = new Customer(1, \\\"John Doe\\\", \\\"john@example.com\\\", \\\"1234567890\\\");\\n                customerService.addCustomer(customer);\\n                assertEquals(customer, customerService.getCustomer(1));\\n            }\\n        \\n            @Test\\n            void testGetCustomer() {\\n                Customer customer = new Customer(2, \\\"Jane Doe\\\", \\\"jane@example.com\\\", \\\"0987654321\\\");\\n                customerService.addCustomer(customer);\\n                assertEquals(customer, customerService.getCustomer(2));\\n            }\\n        \\n            @Test\\n            void testUpdateCustomer() {\\n                Customer customer = new Customer(3, \\\"Old Name\\\", \\\"old@example.com\\\", \\\"1111111111\\\");\\n                customerService.addCustomer(customer);\\n                customerService.updateCustomer(3, \\\"New Name\\\", \\\"new@example.com\\\", \\\"2222222222\\\");\\n                Customer updatedCustomer = customerService.getCustomer(3);\\n                assertEquals(\\\"New Name\\\", updatedCustomer.name);\\n                assertEquals(\\\"new@example.com\\\", updatedCustomer.email);\\n                assertEquals(\\\"2222222222\\\", updatedCustomer.phone);\\n            }\\n        \\n            @Test\\n            void testDeleteCustomer() {\\n                Customer customer = new Customer(4, \\\"To Be Deleted\\\", \\\"delete@example.com\\\", \\\"3333333333\\\");\\n                customerService.addCustomer(customer);\\n                customerService.deleteCustomer(4);\\n                assertNull(customerService.getCustomer(4));\\n            }\\n        }\\n        \\n        \"",
                            "id": 975
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 489,
            "articleName": "Express post API With Cookie",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 1,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JEST",
            "video_url": "https://genaiexperiencestorage.blob.core.windows.net/prompt-lib/Test-For-Express-GET-Api-With-Cookie.mp4?sv=2024-08-04&st=2025-02-27T13%3A54%3A39Z&se=2025-08-26T13%3A54%3A39Z&sr=b&sp=r&sig=eJoaU%2BK%2FbSsIW5vZX7r5Jdz3xDh%2BWAoEkJTogo3KMsc%3D",
            "video_id": 486,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 871,
                    "Prompt": "Create Test Case for GetEventByUserId Where Get the UserId by Cookie, and Get Event by UserId.",
                    "PromptType": null,
                    "lang": "javascript",
                    "PromptDesc": [],
                    "Code": [
                        {
                            "code": "\"test('getEventByUserid test', async () => {\\n\\n                const res = await request(app)\\n            \\n                    .get('/getEventByUserid')\\n            \\n                    .set('Cookie', cookie)\\n            \\n                    .send({\\n            \\n                        userid: 'test',\\n            \\n                    });\\n            \\n                expect(res.statusCode).toEqual(200);\\n            \\n                expect(res.body).toHaveProperty('events');\\n            \\n            });\\n            \\n             \\n            \\n            // Path: src\\\\tests\\\\getEventByUserid.test.js\\n            \\n            //create test case for getEventByUserid where get the userid by cookie, and get event by userid\\n            \\n            test('getEventByUserid test', async () => {\\n            \\n                const res = await request(app)\\n            \\n                    .get('/getEventByUserid')\\n            \\n                    .set('Cookie', cookie)\\n            \\n                    .send({\\n            \\n                        userid: 'test',\\n            \\n                    });\\n            \\n                expect(res.statusCode).toEqual(200);\\n            \\n                expect(res.body).toHaveProperty('events');\\n            \\n            });\\n            \\n             \\n            \\n            // Path: src\\\\tests\\\\getEventByUserid.test.js\\n            \\n            //create test case for getEventByUserid where get the userid by cookie, and get event by userid\\n            \\n            test('getEventByUserid test', async () => {\\n            \\n                const res = await request(app)\\n            \\n                    .get('/getEventByUserid')\\n            \\n                    .set('Cookie', cookie)\\n            \\n                    .send({\\n            \\n                        userid: 'test',\\n            \\n                    });\\n            \\n                expect(res.statusCode).toEqual(200);\\n            \\n                expect(res.body).toHaveProperty('events');\\n            \\n            });\\n            \\n             \\n            \\n            // Path: src\\\\tests\\\\getEventByUserid.test.js\\n            \\n            //create test case for getEventByUserid where get the userid by cookie, and get event by userid\\n            \\n            test('getEventByUserid test', async () => {\\n            \\n                const res = await request(app)\\n            \\n                    .get('/getEventByUserid')\\n            \\n                    .set('Cookie', cookie)\\n            \\n                    .send({\\n            \\n                        userid: 'test',\\n            \\n                    });\\n            \\n                expect(res.statusCode).toEqual(200);\\n            \\n                expect(res.body).toHaveProperty('events');\\n            \\n            });\\n            \\n             \\n            \\n            // Path: src\\\\tests\\\\getEventByUserid.test.js\\n            \\n            //create test case for getEventByUserid where get the userid by cookie, and get event by userid\\n            \\n            test('getEventByUserid test', async () => {\\n            \\n                const res = await request(app)\\n            \\n                    .get('/getEventByUserid')\\n            \\n                    .set('Cookie', cookie)\\n            \\n                    .send({\\n            \\n                        userid: 'test',\\n            \\n                    });\\n            \\n                expect(res.statusCode).\\n            \"",
                            "id": 1345
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 549,
            "articleName": "Expense Tracker App Testing",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 3,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JUNIT",
            "video_url": "https://genaiexperiencestorage.blob.core.windows.net/prompt-lib/ExpenseTrackerTesting.mp4?sv=2024-08-04&st=2025-02-27T13%3A54%3A47Z&se=2025-08-26T13%3A54%3A47Z&sr=b&sp=r&sig=QquNbQ2VRfQvt4hdTxRGIbNbkos6OdfqII0HmM9pY30%3D",
            "video_id": 546,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 690,
                    "Prompt": "package com.example.Testing;\n      import java.util.ArrayList;\n      import java.util.HashMap;\n      import java.util.List;\n      import java.util.Map;\n      import java.util.Scanner;\n    \n\n    \n      class Expense {\n          private String description;\n          private double amount;\n          private String category;\n    \n\n    \n          public Expense(String description, double amount, String\n      category) {\n              this.description = description;\n              this.amount = amount;\n              this.category = category;\n          }\n    \n\n    \n          public String getDescription() {\n              return description;\n          }\n    \n\n    \n          public double getAmount() {\n              return amount;\n          }\n    \n\n    \n          public String getCategory() {\n              return category;\n          }\n    \n\n    \n          @Override\n          public String toString() {\n              return \"Expense{\" +\n                     \n      \"description='\" + description + '\\'' +\n                      \",\n      amount=\" + amount +\n                      \",\n      category='\" + category + '\\'' +\n                      '}';\n          }\n      }\n    \n\n    \n      class ExpenseTracker {\n          private List<Expense> expenses;\n          private Map<String, Double> categoryTotals;\n    \n\n    \n          public ExpenseTracker() {\n              expenses = new ArrayList<>();\n              categoryTotals = new HashMap<>();\n          }\n    \n\n    \n          public void logExpense(String description, double amount,\n      String category) {\n              Expense expense = new Expense(description,\n      amount, category);\n              expenses.add(expense);\n    \n\n    \n              // Update category totals\n              categoryTotals.put(category,\n      categoryTotals.getOrDefault(category, 0.0) + amount);\n          }\n    \n\n    \n          public List<Expense> getExpenses() {\n              return expenses;\n          }\n    \n\n    \n          public Map<String, Double> getCategoryTotals() {\n              return categoryTotals;\n          }\n      }\n    \n\n    \n      public class ExpenseTrackerApp {\n          public static void main(String[] args) {\n              Scanner scanner = new Scanner(System.in);\n              ExpenseTracker expenseTracker = new\n      ExpenseTracker();\n    \n\n    \n              while (true) {\n                 \n      System.out.println(\"\\nExpense Tracker Menu:\");\n                  System.out.println(\"1. Log\n      an Expense\");\n                  System.out.println(\"2. View\n      Expenses\");\n                  System.out.println(\"3. View\n      Category Totals\");\n                  System.out.println(\"4.\n      Exit\");\n                  System.out.print(\"Enter\n      your choice: \");\n    \n\n    \n                  int choice = scanner.nextInt();\n    \n\n    \n                  switch (choice) {\n                      case 1:\n                         \n      System.out.print(\"Enter expense description: \");\n                         \n      String description = scanner.next();\n    \n\n    \n                         \n      System.out.print(\"Enter expense amount: \");\n                         \n      double amount = scanner.nextDouble();\n    \n\n    \n                         \n      System.out.print(\"Enter expense category: \");\n                         \n      String category = scanner.next();\n    \n\n    \n                         \n      expenseTracker.logExpense(description, amount, category);\n                         \n      System.out.println(\"Expense logged successfully!\");\n                         \n      break;\n    \n\n    \n                      case 2:\n                         \n      List<Expense> expenses = expenseTracker.getExpenses();\n                          if\n      (expenses.isEmpty()) {\n                         \n          System.out.println(\"No expenses logged yet.\");\n                          }\n      else {\n                         \n          System.out.println(\"Expenses:\");\n                         \n          for (Expense expense : expenses) {\n                         \n              System.out.println(expense);\n                         \n          }\n                          }\n                         \n      break;\n    \n\n    \n                      case 3:\n                         \n      Map<String, Double> categoryTotals =\n      expenseTracker.getCategoryTotals();\n                          if\n      (categoryTotals.isEmpty()) {\n                         \n          System.out.println(\"No expenses logged yet.\");\n                          }\n      else {\n                         \n          System.out.println(\"Category Totals:\");\n                         \n          for (Map.Entry<String, Double> entry :\n      categoryTotals.entrySet()) {\n                         \n              System.out.println(entry.getKey() + \":\n      $\" + entry.getValue());\n                         \n          }\n                          }\n                         \n      break;\n    \n\n    \n                      case 4:\n                         \n      System.out.println(\"Exiting Expense Tracker. Goodbye!\");\n                         \n      System.exit(0);\n    \n\n    \n                      default:\n                         \n      System.out.println(\"Invalid choice. Please enter a valid\n      option.\");\n                  }\n              }\n          }\n      }\n    \nWrite the Junit Test Cases for the above code.",
                    "PromptType": "Code",
                    "lang": "java",
                    "PromptDesc": [],
                    "Code": [
                        {
                            "code": "\"package com.example.Testing;\\n\\n    import org.junit.jupiter.api.BeforeEach;\\n    import org.junit.jupiter.api.Test;\\n    \\n    import java.util.List;\\n    import java.util.Map;\\n    \\n    import static org.junit.jupiter.api.Assertions.*;\\n    \\n    class ExpenseTest {\\n        private Expense expense;\\n    \\n        @BeforeEach\\n        void setUp() {\\n            expense = new Expense(\\\"Test\\\", 100.0, \\\"Food\\\");\\n        }\\n    \\n        @Test\\n        void getDescription() {\\n            assertEquals(\\\"Test\\\", expense.getDescription());\\n        }\\n    \\n        @Test\\n        void getAmount() {\\n            assertEquals(100.0, expense.getAmount());\\n        }\\n    \\n        @Test\\n        void getCategory() {\\n            assertEquals(\\\"Food\\\", expense.getCategory());\\n        }\\n    }\\n    \\n    class ExpenseTrackerTest {\\n        private ExpenseTracker expenseTracker;\\n    \\n        @BeforeEach\\n        void setUp() {\\n            expenseTracker = new ExpenseTracker();\\n        }\\n    \\n        @Test\\n        void logExpense() {\\n            expenseTracker.logExpense(\\\"Test\\\", 100.0, \\\"Food\\\");\\n            List<Expense> expenses = expenseTracker.getExpenses();\\n            assertFalse(expenses.isEmpty());\\n            assertEquals(\\\"Test\\\", expenses.get(0).getDescription());\\n            assertEquals(100.0, expenses.get(0).getAmount());\\n            assertEquals(\\\"Food\\\", expenses.get(0).getCategory());\\n        }\\n    \\n        @Test\\n        void getCategoryTotals() {\\n            expenseTracker.logExpense(\\\"Test\\\", 100.0, \\\"Food\\\");\\n            Map<String, Double> categoryTotals = expenseTracker.getCategoryTotals();\\n            assertFalse(categoryTotals.isEmpty());\\n            assertTrue(categoryTotals.containsKey(\\\"Food\\\"));\\n            assertEquals(100.0, categoryTotals.get(\\\"Food\\\"));\\n        }\\n    }\\n     \"",
                            "id": 1088
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 553,
            "articleName": "Employee Management App Testing",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 3,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JUNIT",
            "video_url": "https://genaiexperiencestorage.blob.core.windows.net/prompt-lib/EmployeeManagementTesting.mp4?sv=2024-08-04&st=2025-02-27T13%3A54%3A47Z&se=2025-08-26T13%3A54%3A47Z&sr=b&sp=r&sig=9efya%2F8GL7aYAhtuR7mSuVLXzgBDwfhJCy3wfF2N79k%3D",
            "video_id": 550,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 700,
                    "Prompt": "            package com.example.Testing;\n            import java.util.HashMap;\n            import java.util.Map;\n            import java.util.Scanner;\n             \n            class Employee {\n                String name;\n                String address;\n                int age;\n             \n                Employee(String name, String address, int age) {\n                    this.name = name;\n                    this.address = address;\n                    this.age = age;\n                }\n             \n                public String toString() {\n                    return \"Name: \" + name + \", Address: \" + address + \", Age: \" + age;\n                }\n            }\n             \n            public class EmployeeManagementSystem {\n                private Map<String, Employee> employees = new HashMap<>();\n             \n                public void registerEmployee(String id, Employee employee) {\n                    employees.put(id, employee);\n                }\n             \n                public void updateEmployee(String id, Employee employee) {\n                    if (employees.containsKey(id)) {\n                        employees.put(id, employee);\n                    } else {\n                        throw new IllegalArgumentException(\"Employee not found.\");\n                    }\n                }\n             \n                public String displayEmployee(String id) {\n                    if (employees.containsKey(id)) {\n                        return employees.get(id).toString();\n                    } else {\n                        throw new IllegalArgumentException(\"Employee not found.\");\n                    }\n                }\n             \n                public static void main(String[] args) {\n                    EmployeeManagementSystem ems = new EmployeeManagementSystem();\n                    Scanner scanner = new Scanner(System.in);\n             \n                    while (true) {\n                        System.out.println(\"1. Register Employee\");\n                        System.out.println(\"2. Update Employee\");\n                        System.out.println(\"3. Display Employee\");\n                        System.out.println(\"4. Exit\");\n                        System.out.print(\"Enter your choice: \");\n                        int choice = scanner.nextInt();\n                        scanner.nextLine(); // consume newline\n             \n                        switch (choice) {\n                            case 1:\n                                System.out.print(\"Enter ID: \");\n                                String id = scanner.nextLine();\n                                System.out.print(\"Enter Name: quot;);\n                                String name = scanner.nextLine();                    System.out.print(\"Enter Address: \");\n                                String address = scanner.nextLine();\n                                System.out.print(\"Enter Age: \");\n                                int age = scanner.nextInt();\n                                scanner.nextLine(); // consume newline\n                                ems.registerEmployee(id, new Employee(name, address, age));\n                                break;\n                            case 2:\n                                System.out.print(\"Enter ID: \");\n                                id = scanner.nextLine();\n                                System.out.print(\"Enter Name: \");\n                                name = scanner.nextLine();\n                                System.out.print(\"Enter Address: \");\n                                address = scanner.nextLine();\n                                System.out.print(\"Enter Age: \");\n                                age = scanner.nextInt();\n                                scanner.nextLine(); // consume newline\n                                ems.updateEmployee(id, new Employee(name, address, age));\n                                break;\n                            case 3:\n                                System.out.print(\"Enter ID: \");\n                                id = scanner.nextLine();\n                                ems.displayEmployee(id);\n                                break;\n                            case 4:\n                                scanner.close();\n                                System.exit(0);\n                            default:\n                                System.out.println(\"Invalid choice.\");\n                        }\n                    }\n                }\n             \n                public Employee getEmployee(String id) {\n                    if (employees.containsKey(id)) {\n                        return employees.get(id);\n                    } else {\n                        throw new IllegalArgumentException(\"Employee not found.\");\n                    }\n                }\n            }\n            Write the Junit Test Cases for the above code.\n            \n             \n          ",
                    "PromptType": "Code",
                    "lang": "java",
                    "PromptDesc": [],
                    "Code": [
                        {
                            "code": "\"  package com.example.Testing;\\n\\n  import static org.junit.jupiter.api.Assertions.assertEquals;\\n  import static org.junit.jupiter.api.Assertions.assertThrows;\\n  import org.junit.jupiter.api.BeforeEach;\\n  import org.junit.jupiter.api.Test;\\n  \\n  class EmployeeManagementSystemTest {\\n  \\n      private EmployeeManagementSystem ems;\\n  \\n      @BeforeEach\\n      void setUp() {\\n          ems = new EmployeeManagementSystem();\\n      }\\n  \\n      @Test\\n      void testRegisterEmployee() {\\n          Employee employee = new Employee(\\\"John Doe\\\", \\\"123 Street\\\", 30);\\n          ems.registerEmployee(\\\"1\\\", employee);\\n          assertEquals(employee, ems.getEmployee(\\\"1\\\"));\\n      }\\n  \\n      @Test\\n      void testUpdateEmployee() {\\n          Employee employee = new Employee(\\\"John Doe\\\", \\\"123 Street\\\", 30);\\n          ems.registerEmployee(\\\"1\\\", employee);\\n          Employee updatedEmployee = new Employee(\\\"Jane Doe\\\", \\\"456 Avenue\\\", 32);\\n          ems.updateEmployee(\\\"1\\\", updatedEmployee);\\n          assertEquals(updatedEmployee, ems.getEmployee(\\\"1\\\"));\\n      }\\n  \\n      @Test\\n      void testUpdateNonExistentEmployee() {\\n          Employee employee = new Employee(\\\"John Doe\\\", \\\"123 Street\\\", 30);\\n          assertThrows(IllegalArgumentException.class, () -> ems.updateEmployee(\\\"1\\\", employee));\\n      }\\n  \\n      @Test\\n      void testDisplayEmployee() {\\n          Employee employee = new Employee(\\\"John Doe\\\", \\\"123 Street\\\", 30);\\n          ems.registerEmployee(\\\"1\\\", employee);\\n          assertEquals(employee.toString(), ems.displayEmployee(\\\"1\\\"));\\n      }\\n  \\n      @Test\\n      void testDisplayNonExistentEmployee() {\\n          assertThrows(IllegalArgumentException.class, () -> ems.displayEmployee(\\\"1\\\"));\\n      }\\n  }\\n   \\n  \\n    \\n\"",
                            "id": 1106
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 557,
            "articleName": "Button Fire Event Testing",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 1,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JEST",
            "video_url": "https://genaiexperiencestorage.blob.core.windows.net/prompt-lib/Button-FireEvent-TestCase.mp4?sv=2024-08-04&st=2025-02-27T13%3A54%3A48Z&se=2025-08-26T13%3A54%3A48Z&sr=b&sp=r&sig=j1%2FRZ83hTzDnsGCIPs1Q6RfWNhlMav8HZ3PI96snxJE%3D",
            "video_id": 554,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 707,
                    "Prompt": "Write a Test Case To Check Button Click Event for Pagination.",
                    "PromptType": null,
                    "lang": "javascript",
                    "PromptDesc": [],
                    "Code": [
                        {
                            "code": "\"        \\n    describe('Paginate', () => {\\n      it('should call onClick when button is clicked', () => {\\n        const onClick = jest.fn();\\n        const wrapper = shallow(<Paginate onClick={onClick} />);\\n        wrapper.find('button').simulate('click');\\n        expect(onClick).toHaveBeenCalled();\\n      });\\n    });   \\n    you need to define datatestId=\\\"\\\" in the button tag to make it work\\nI've changed the code a bit to make it work & using inline suggestions.\\n     \\n    //write a test case to check button click event for pagination.\\n\\n    import React from 'react';\\n    import { render, fireEvent } from '@testing-library/react';\\n    import Paginate from '../../../../../src/Components/Reusable/CustomPagination/Paginate';\\n\\n    const showPerPage = 5;\\n    const onPaginationChange = jest.fn();\\n    const postMessage = [\\n      {id: 1,title: 'Post 1'}, \\n      {id: 2, title: 'Post 2'}, \\n      {id: 3, title: 'Post 3'}\\n    ];\\n    describe('Paginate', () => {\\n    it('should call onClick when button is clicked', () => {\\n      const { getByTestId } = render(\\n          <Paginate\\n          showPerPage={showPerPage}\\n          onPaginationChange={onPaginationChange}\\n          total={postMessage.length}\\n        />\\n      );\\n      const button = getByTestId('button');\\n      fireEvent.click(button);\\n    });\\n    });\\n    \\n    \\n    \"",
                            "id": 1117
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 562,
            "articleName": "Get-By-Text Testing",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 1,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JEST",
            "video_url": "https://genaiexperiencestorage.blob.core.windows.net/prompt-lib/GetbyText-Test-Case.mp4?sv=2024-08-04&st=2025-02-27T13%3A54%3A48Z&se=2025-08-26T13%3A54%3A48Z&sr=b&sp=r&sig=C14%2BhUZSZMb1No9ACs%2BHXATJi8L0RJq7wJ8Tl76rokI%3D",
            "video_id": 559,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 711,
                    "Prompt": "Write a Test Case With Get-by-text for Org-setting Component.",
                    "PromptType": null,
                    "lang": "javascript",
                    "PromptDesc": [],
                    "Code": [
                        {
                            "code": "\"    \\n  describe('OrgSetting', () => {\\n      it('should render orgSetting component', () => {\\n        window.matchMedia = matchMediaMock.create();\\n        const { getByText } = render(<OrgSetting />);\\n        const wrapper = getByText('Employee Name');\\n        expect(wrapper).toBeInTheDocument();\\n      });\\n  });   \\n\\nWe have use inline comments to get mock router and matchMediaMock.\\n \\n  //write a test case with getbytext for orgsetting component.\\\\\\\\\\n\\n  import React from 'react';\\n  import { render } from '@testing-library/react';\\n  import '@testing-library/jest-dom/extend-expect';\\n  import OrgSetting from '../../../Components/Batch/OrgSetting';\\n  import matchMediaMock from 'match-media-mock';\\n  import { BrowserRouter } from 'react-router-dom';\\n  \\n  //can you please add jest mock router for this test case.\\n  const mockedUsedNavigate = jest.fn();\\n  jest.mock('react-router-dom', () => ({\\n    ...jest.requireActual('react-router-dom'),\\n    useNavigate: () => mockedUsedNavigate,\\n  }));  \\n  describe('OrgSetting', () => {\\n    it('should render orgSetting component', () => {\\n      window.matchMedia = matchMediaMock.create();\\n      const { getByText } = render(\\n        <BrowserRouter>\\n          <OrgSetting />\\n        </BrowserRouter>\\n      );\\n      const wrapper = getByText('Employee Name');\\n      expect(wrapper).toBeInTheDocument();\\n    });\\n  });   \\n\\n\"",
                            "id": 1121
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 566,
            "articleName": "Mock API Test Case",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 1,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JEST",
            "video_url": "https://genaiexperiencestorage.blob.core.windows.net/prompt-lib/Mock-API.mp4?sv=2024-08-04&st=2025-02-27T13%3A54%3A49Z&se=2025-08-26T13%3A54%3A49Z&sr=b&sp=r&sig=D8Sh5013MVM2KmsM1ZnZj2hhQ1tNwGVe5mAop3w0bB8%3D",
            "video_id": 563,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 717,
                    "Prompt": "Create a Post Mock API Endpoint for Testing Purpose , Which Will Return a Json Object With a Key Value Pair and Response Status 200.",
                    "PromptType": null,
                    "lang": "javascript",
                    "PromptDesc": [],
                    "Code": [
                        {
                            "code": "\"          const mockPostApi = (url, data) => {\\n              return new Promise((resolve, reject) => {\\n                setTimeout(() => {\\n                  resolve({\\n                    data: {\\n                      name: \\\"John Doe\\\",\\n                    },\\n                    status: 200,\\n                  });\\n                }, 2000);\\n              });\\n            };\\n            \\n            test(\\\"fetch post api\\\", async () => {\\n              const url = \\\"https://jsonplaceholder.typicode.com/posts\\\";\\n              const data = {\\n                name: \\\"John Doe\\\",\\n              };\\n              const res = await mockPostApi(url, data);\\n              expect(res.status).toEqual(200);\\n              expect(res.data.name).toEqual(\\\"John Doe\\\");\\n                  });\\n            \"",
                            "id": 1127
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 571,
            "articleName": "Local Storage Test Case",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 1,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JEST",
            "video_url": "https://genaiexperiencestorage.blob.core.windows.net/prompt-lib/LocalStorage-TestCase.mp4?sv=2024-08-04&st=2025-02-27T13%3A54%3A50Z&se=2025-08-26T13%3A54%3A50Z&sr=b&sp=r&sig=KRWNsRTxwsXHBV2O249o2qHF9jYude%2BmCyuV1xwdZjk%3D",
            "video_id": 568,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 586,
                    "Prompt": "Create a Test Case for to Mock Local Storage and Test the Function.",
                    "PromptType": null,
                    "lang": "javascript",
                    "PromptDesc": [],
                    "Code": [
                        {
                            "code": "\"        describe('Test the local storage', () => {\\n                    it('should set the item in the local storage', () => {\\n                      LocalStorage.setItem('test', 'test');\\n                      expect(LocalStorage.getItem('test')).toBe('test');\\n                    });\\n                  \\n                    it('should remove the item in the local storage', () => {\\n                      LocalStorage.removeItem('test');\\n                      expect(LocalStorage.getItem('test')).toBe(null);\\n                    });\\n                  });\\n            \"",
                            "id": 941
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 584,
            "articleName": "Hotel Booking App Testing",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 3,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JUNIT",
            "video_url": "https://genaiexperiencestorage.blob.core.windows.net/prompt-lib/HotelBookingApplication.mp4?sv=2024-08-04&st=2025-02-27T13%3A54%3A52Z&se=2025-08-26T13%3A54%3A52Z&sr=b&sp=r&sig=x6deYkgi1CMY5o%2BkpL5TO8zx6Ef5R3L6WKZyLL3znHU%3D",
            "video_id": 581,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 733,
                    "Prompt": "    package com.example.Testing;\n\nimport java.util.*;\n\nclass Hotel {\n    private String name;\n    private List<Room> rooms;\n\n    public Hotel(String name, List<Room> rooms) {\n        this.name = name;\n        this.rooms = rooms;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public List<Room> getRooms() {\n        return rooms;\n    }\n}\n\nclass Room {\n    private String number;\n    private boolean isAvailable;\n\n    public Room(String number) {\n        this.number = number;\n        this.isAvailable = true;\n    }\n\n    public String getNumber() {\n        return number;\n    }\n\n    public boolean isAvailable() {\n        return isAvailable;\n    }\n\n    public void setAvailable(boolean available) {\n        isAvailable = available;\n    }\n}\n\nclass Reservation {\n    private String customerName;\n    private Room room;\n\n    public Reservation(String customerName, Room room) {\n        this.customerName = customerName;\n        this.room = room;\n        room.setAvailable(false);\n    }\n\n    public String getCustomerName() {\n        return customerName;\n    }\n\n    public Room getRoom() {\n        return room;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Room> rooms = new ArrayList<>();\n        for (int i = 1; i <= 10; i++) {\n            rooms.add(new Room(\"Room \" + i));\n        }\n\n        Hotel hotel = new Hotel(\"The Grand Hotel\", rooms);\n\n        Scanner scanner = new Scanner(System.in);\n        while (true) {\n            System.out.println(\"Welcome to \" + hotel.getName() + \". Please choose an option:\");\n            System.out.println(\"1. Check room availability\");\n            System.out.println(\"2. Make a reservation\");\n            System.out.println(\"3. Exit\");\n\n            int option = scanner.nextInt();\n            scanner.nextLine(); // consume newline\n\n            if (option == 1) {\n                System.out.println(\"Available rooms:\");\n                for (Room room : hotel.getRooms()) {\n                    if (room.isAvailable()) {\n                        System.out.println(room.getNumber());\n                    }\n                }\n            } else if (option == 2) {\n                System.out.println(\"Enter your name:\");\n                String name = scanner.nextLine();\n\n                System.out.println(\"Enter room number:\");\n                String roomNumber = scanner.nextLine();\n\n                Room roomToReserve = null;\n                for (Room room : hotel.getRooms()) {\n                    if (room.getNumber().equals(roomNumber) && room.isAvailable()) {\n                        roomToReserve = room;\n                        break;\n                    }\n                }\n\n                if (roomToReserve != null) {\n                    Reservation reservation = new Reservation(name, roomToReserve);\n                    System.out.println(\"Reservation made for \" + reservation.getCustomerName() + \" in \" + reservation.getRoom().getNumber());\n                } else {\n                    System.out.println(\"Room not available.\");\n                }\n            } else if (option == 3) {\n                System.out.println(\"Thank you for using our system. Goodbye!\");\n                break;\n            } else {\n                System.out.println(\"Invalid option. Please try again.\");\n            }\n        }\n\n        scanner.close();\n    }\n}\nWrite the Junit Test Cases for the above code.",
                    "PromptType": "Code",
                    "lang": "java",
                    "PromptDesc": [],
                    "Code": [
                        {
                            "code": "\" \\n    package com.example.Testing;\\n\\nimport org.junit.jupiter.api.Test;\\nimport static org.junit.jupiter.api.Assertions.*;\\n\\nimport java.util.*;\\n\\nclass HotelTest {\\n    @Test\\n    void testGetName() {\\n        List<Room> rooms = new ArrayList<>();\\n        rooms.add(new Room(\\\"Room 1\\\"));\\n        Hotel hotel = new Hotel(\\\"Test Hotel\\\", rooms);\\n        assertEquals(\\\"Test Hotel\\\", hotel.getName());\\n    }\\n\\n    @Test\\n    void testGetRooms() {\\n        List<Room> rooms = new ArrayList<>();\\n        rooms.add(new Room(\\\"Room 1\\\"));\\n        Hotel hotel = new Hotel(\\\"Test Hotel\\\", rooms);\\n        assertEquals(rooms, hotel.getRooms());\\n    }\\n}\\n\\nclass RoomTest {\\n    @Test\\n    void testGetNumber() {\\n        Room room = new Room(\\\"Room 1\\\");\\n        assertEquals(\\\"Room 1\\\", room.getNumber());\\n    }\\n\\n    @Test\\n    void testIsAvailable() {\\n        Room room = new Room(\\\"Room 1\\\");\\n        assertTrue(room.isAvailable());\\n    }\\n\\n    @Test\\n    void testSetAvailable() {\\n        Room room = new Room(\\\"Room 1\\\");\\n        room.setAvailable(false);\\n        assertFalse(room.isAvailable());\\n    }\\n}\\n\\nclass ReservationTest {\\n    @Test\\n    void testGetCustomerName() {\\n        Room room = new Room(\\\"Room 1\\\");\\n        Reservation reservation = new Reservation(\\\"John Doe\\\", room);\\n        assertEquals(\\\"John Doe\\\", reservation.getCustomerName());\\n    }\\n\\n    @Test\\n    void testGetRoom() {\\n        Room room = new Room(\\\"Room 1\\\");\\n        Reservation reservation = new Reservation(\\\"John Doe\\\", room);\\n        assertEquals(room, reservation.getRoom());\\n    }\\n\\n    @Test\\n    void testRoomAvailabilityAfterReservation() {\\n        Room room = new Room(\\\"Room 1\\\");\\n        Reservation reservation = new Reservation(\\\"John Doe\\\", room);\\n        assertFalse(room.isAvailable());\\n    }\\n}\\n    \\n\"",
                            "id": 1152
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 591,
            "articleName": "Post API Test",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 3,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JUNIT",
            "video_url": "https://genaiexperiencestorage.blob.core.windows.net/prompt-lib/junittestcaseForPostApi.mp4?sv=2024-08-04&st=2025-02-27T13%3A54%3A53Z&se=2025-08-26T13%3A54%3A53Z&sr=b&sp=r&sig=gsQnB7%2BKYhUmzoV16vrsJqL9Yxiphb0qQybkpBjqtoc%3D",
            "video_id": 588,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 742,
                    "Prompt": "Junit Test Case for Post API to Create Event\n",
                    "PromptType": null,
                    "lang": "javascript",
                    "PromptDesc": [],
                    "Code": [
                        {
                            "code": "\" @RunWith(SpringRunner.class)\\n\\n        @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\\n        \\n        public class SpringBootRestApiTest {\\n        \\n           \\n        \\n            @Autowired\\n        \\n            private TestRestTemplate restTemplate;\\n        \\n           \\n        \\n            @Test\\n        \\n            public void testCreateEvent() {\\n        \\n                Event event = new Event();\\n        \\n                event.setName(\\\"Test Event\\\");\\n        \\n                event.setEventDate(new Date());\\n        \\n                event.setEventLocation(\\\"Test Location\\\");\\n        \\n                ResponseEntity<Event> postResponse = restTemplate.postForEntity(\\\"http://localhost:8080/event\\\", event, Event.class);\\n        \\n                Assert.assertNotNull(postResponse);\\n        \\n                Assert.assertNotNull(postResponse.getBody());\\n        \\n            }\\n        \\n           \\n        \\n            @Test\\n        \\n            public void testGetAllEvents() {\\n        \\n                HttpHeaders headers = new HttpHeaders();\\n        \\n                HttpEntity<String> entity = new HttpEntity<String>(null, headers);\\n        \\n                ResponseEntity<String> response = restTemplate.exchange(\\\"http://localhost:8080/event\\\", HttpMethod.GET, entity, String.class);\\n        \\n                Assert.assertNotNull(response.getBody());\\n        \\n            }\\n        \\n           \\n        \\n            @Test\\n        \\n            public void testUpdateEvent() {\\n        \\n                int id = 1;\\n        \\n                Event event = restTemplate.getForObject(\\\"http://localhost:8080/event/\\\"+id, Event.class);\\n        \\n                event.setName(\\\"Test Event\\\");\\n        \\n                event.setEventDate(new Date());\\n        \\n                event.setEventLocation(\\\"Test Location\\\");\\n        \\n                restTemplate.put(\\\"http://localhost:8080/event/\\\"+id, event);\\n        \\n                Event updatedEvent = restTemplate.getForObject(\\\"http://localhost:8080/event/\\\"+id, Event.class);\\n        \\n                Assert.assertNotNull(updatedEvent);\\n        \\n            }\\n        \\n           \\n        \\n            @Test\\n        \\n            public void testDeleteEvent() {\\n        \\n                int id = 2;\\n        \\n                Event event = restTemplate.getForObject(\\\"http://localhost:8080/event/\\\"+id, Event.class);\\n        \\n                Assert.assertNotNull(event);\\n        \\n                restTemplate.delete(\\\"http://localhost:8080/event/\\\"+id);\\n        \\n                try {\\n        \\n                    event = restTemplate.getForObject(\\\"http://localhost:8080/event/\\\"+id, Event.class);\\n        \\n                } catch (final HttpClientErrorException e) {\\n        \\n                    Assert.assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\\n        \\n                }\\n        \\n            }\\n        \\n           \\n        \\n            @Test\\n        \\n            public void testGetEventByName() {\\n        \\n                String name = \\\"Test Event\\\";\\n        \\n                Event event = restTemplate.getForObject(\\\"http://localhost:8080/event/\\\"+name, Event.class);\\n        \\n                Assert.assertNotNull(event);\\n        \\n                Assert.assertEquals(event.getName(), name);\\n        \\n            }\\n        \\n           \\n        \\n            @Test\\n        \\n            public void testGetEventByLocation() {\\n        \\n                String location = \\\"Test Location\\\";\\n        \\n                Event event = restTemplate.getForObject(\\\"http://localhost:808\\n        \\n\\n            \\n    \\n   \"",
                            "id": 1169
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 593,
            "articleName": "React Unit Testing For Accordion Functionality",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 1,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JEST",
            "video_url": "https://genaiexperiencestorage.blob.core.windows.net/prompt-lib/Accordion-UnitTesting.mp4?sv=2024-08-04&st=2025-02-27T13%3A54%3A53Z&se=2025-08-26T13%3A54%3A53Z&sr=b&sp=r&sig=lN1%2BHuvXF9At0jRd2vu7VF95tXIEYMSknmAkc6EDyl0%3D",
            "video_id": 590,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 744,
                    "Prompt": "  \n                // src/components/Accordion.js import React, { useState } from 'react'; import { MdExpandMore, MdExpandLess } from 'react-icons/md'; import './Accordion.css';\n                const Accordion = ({ data }) => \n                    { const [openIndex, setOpenIndex] = useState(null);\n                const toggleAccordion = (index) => {\n                     setOpenIndex((prevIndex) => \n                     (prevIndex === index ? null : index)); \n                    };\n                \n                return ( {data.map((item, index) => \n                    ( <div className={accordion-header ${openIndex === index ?\n                         'open' : ''}} onClick={() => \n                        toggleAccordion(index)} tabIndex={0} \n                        // Enable keyboard accessibility role=\"button\" \n                        aria-expanded={openIndex === index} > {item.title} {openIndex === index ? : } <\n                        div className={accordion-content ${openIndex === index ? 'open' : ''}\n                        \n                    }\n                         > {item.content} ))} ); };\n                export default Accordion;\n                 \n            Give me unit test case for above code",
                    "PromptType": "Code",
                    "lang": "javascript",
                    "PromptDesc": [
                        {
                            "desc": "Sure! Here's an example unit test case for the Accordion component:",
                            "id": 951
                        }
                    ],
                    "Code": [
                        {
                            "code": "\"import React from 'react';\\n                    import { render, fireEvent } from '@testing-library/react';\\n                    import Accordion from './Accordion';\\n                    \\n                    describe('Accordion', () => {\\n                      const testData = [\\n                        { title: 'Item 1', content: 'Content 1' },\\n                        { title: 'Item 2', content: 'Content 2' },\\n                        { title: 'Item 3', content: 'Content 3' },\\n                      ];\\n                    \\n                      it('should render the accordion items', () => {\\n                        const { getByText } = render(<Accordion data={testData} />);\\n                        \\n                        testData.forEach((item) => {\\n                          expect(getByText(item.title)).toBeInTheDocument();\\n                          expect(getByText(item.content)).toBeInTheDocument();\\n                        });\\n                      });\\n                    \\n                      it('should toggle accordion item on click', () => {\\n                        const { getByText } = render(<Accordion data={testData} />);\\n                        \\n                        const accordionItem = getByText(testData[0].title).parentElement;\\n                        fireEvent.click(accordionItem);\\n                        \\n                        expect(accordionItem).toHaveClass('open');\\n                        \\n                        fireEvent.click(accordionItem);\\n                        \\n                        expect(accordionItem).not.toHaveClass('open');\\n                      });\\n                    });\\n                    \\n            \\n        This test case verifies that the Accordion component renders the correct items and that it toggles the accordion item's open state when clicked. You can add more test cases based on your specific requirements.\"",
                            "id": 1171
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 596,
            "articleName": "React Unit Testing For Filter Functionality",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 1,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JEST",
            "video_url": "https://genaiexperiencestorage.blob.core.windows.net/prompt-lib/React-Unit-Testing-For-Filter-Functionality.mp4?sv=2024-08-04&st=2025-02-27T13%3A54%3A53Z&se=2025-08-26T13%3A54%3A53Z&sr=b&sp=r&sig=GSSaKoTfxphApl6qlRUS8IvJiSadz48kY3fP5iMrzS8%3D",
            "video_id": 593,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 747,
                    "Prompt": "  \n                import React, { useState } from 'react';\n\n                function App() {\n                  const [items, setItems] = useState([\n                    { id: 1, name: 'Item 1' },\n                    { id: 2, name: 'Item 2' },\n                    { id: 3, name: 'Item 3' },\n                    { id: 4, name: 'Item 4' },\n                  ]);\n\n                  const [searchTerm, setSearchTerm] = useState('');\n\n                  const handleSearch = (event) => {\n                    setSearchTerm(event.target.value);\n                  };\n\n                  const filteredItems = items.filter((item) =>\n                    item.name.toLowerCase().includes(searchTerm.toLowerCase())\n                  );\n\n                  return (\n                    {filteredItems.map((item) => (\n                      {item.name}\n                    ))}\n                  );\n                }\n\n                export default App;\n                 Give me unit test case for above code\n\n            ",
                    "PromptType": "Code",
                    "lang": "javascript",
                    "PromptDesc": [
                        {
                            "desc": "Sure! Here's a unit test case for the provided code:\n",
                            "id": 954
                        }
                    ],
                    "Code": [
                        {
                            "code": "\"\\n                import { render, screen, fireEvent } from '@testing-library/react';\\n                    import App from './App';\\n                    test('renders search input and filtered items', () => {\\n                      render(<App />);\\n                      // Check if search input is rendered\\n                      const searchInput = screen.getByPlaceholderText(/search/i);\\n                      expect(searchInput).toBeInTheDocument();\\n                      // Check if initial items are rendered\\n                      const initialItems = screen.getAllByRole('listitem');\\n                      expect(initialItems).toHaveLength(4);\\n                      // Check if filtered items are rendered based on search term\\n                      fireEvent.change(searchInput, { target: { value: 'Item 2' } });\\n                      const filteredItems = screen.getAllByRole('listitem');\\n                      expect(filteredItems).toHaveLength(1);\\n                      expect(filteredItems[0]).toHaveTextContent('Item 2');\\n                    });\\nThis test case checks if the search input is rendered, if the initial items are rendered correctly, and if the filtered items are rendered based on the search term. It uses the @testing-library/react library for rendering and querying the components.\"",
                            "id": 1175
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 604,
            "articleName": "Socket.IO component Code Test",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 1,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JEST",
            "video_url": "https://genaiexperiencestorage.blob.core.windows.net/prompt-lib/Socket.IO-TestCases-Generate(Copilot).mp4?sv=2024-08-04&st=2025-02-27T13%3A54%3A55Z&se=2025-08-26T13%3A54%3A55Z&sr=b&sp=r&sig=mM2BZe%2FlRlyOoU8iizp0fzkXF4bqED%2F3n7w0CPjOP0M%3D",
            "video_id": 601,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 755,
                    "Prompt": "                    import React, { useState, useEffect } from 'react';\n                    import io from 'socket.io-client';\n                    const url = 'https://localhost:8001/chat';\n                    const socket = io(url);\n                    \n                    function Sockets() {\n                      const [message, setMessage] = useState('');\n                      const [messages, setMessages] = useState([]);\n                    \n                      useEffect(() => {\n                        socket.on('message', (message) => {\n                          setMessages((prevMessages) => [...prevMessages, message]);\n                        });\n                      }, [socket]);\n                    \n                      const sendMessage = (e) => {\n                        e.preventDefault();\n                        const message = { text: message.value };\n                        socket.emit('message', message);\n                        setMessage('');\n                      };\n                      return (\n                        <div className=\"chat\">\n                          <form onSubmit={sendMessage}<\n                            <input\n                              type=\"text\"\n                              value={message}\n                              onChange={(e) => setMessage(e.target.value)}\n                              placeholder=\"Type your message\"\n                            />\n                            <button type=\"submit\">Send</button>\n                            </form>\n                            <ul className=\"messages\">\n                            {messages.map((message, index) => (\n                                <li key={index}>{message.text}</li>\n                            ))}\n                          </ul>\n                        </div>\n                      );\n                    }\n                    export default Sockets; \n                How can I test the functionality of the Sockets component?",
                    "PromptType": "Code",
                    "lang": "javascript",
                    "PromptDesc": [
                        {
                            "desc": "To test the Sockets component, you can use libraries like Jest and React Testing Library.\n                    Here's a basic example of how you might write a test for this component:\n                This test does the following:\n\n                    It sets up and tears down a mock WebSocket server before and after each test using the mock-socket library.\n\n                    It tests that when the form is submitted, a 'message' event is emitted with the correct message text.\n\n                    It uses the fireEvent function from React Testing Library to simulate user events (typing a message and clicking the 'Send' button).\n\n                    It uses the waitFor function from React Testing Library to wait for the message to be added to the DOM, and then checks that it is present.\n\n                    Please note that this is a basic test and might not cover all edge cases. You might want to add more tests depending on the complexity of your component.\n                \n            ",
                            "id": 959
                        }
                    ],
                    "Code": [
                        {
                            "code": "\"   \\n                    import React from 'react';\\n                    import { render, fireEvent, waitFor, screen } from '@testing-library/react';\\n                    import { Server } from 'mock-socket';\\n                    import Sockets from './Sockets';\\n                    \\n                    describe('Sockets component', () => {\\n                      let mockServer;\\n                    \\n                      beforeEach(() => {\\n                        mockServer = new Server('https://localhost:8001/chat');\\n                      });\\n                    \\n                      afterEach(() => {\\n                        mockServer.stop();\\n                      });\\n                    \\n                      it('should send a message when form is submitted', async () => {\\n                        mockServer.on('connection', socket => {\\n                          socket.on('message', message => {\\n                            expect(message.text).toBe('Test message');\\n                          });\\n                        });\\n                        render(<Sockets />);\\n\\n                        fireEvent.change(screen.getByPlaceholderText('Type your message'), {\\n                          target: { value: 'Test message' },\\n                        });\\n                    \\n                        fireEvent.click(screen.getByText('Send'));\\n                    \\n                        await waitFor(() => expect(screen.getByText('Test message')).toBeInTheDocument());\\n                      });\\n                    });\\n\\n\\n                    \"",
                            "id": 1182
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 607,
            "articleName": "Shopping App Testing",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 3,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JUNIT",
            "video_url": "https://genaiexperiencestorage.blob.core.windows.net/prompt-lib/ShoppingApplication.mp4?sv=2024-08-04&st=2025-02-27T13%3A54%3A55Z&se=2025-08-26T13%3A54%3A55Z&sr=b&sp=r&sig=qZt6196Nh61NtmOtsMeB3x2UTmvqoAKLPL1pAqSRe44%3D",
            "video_id": 604,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 758,
                    "Prompt": "    package com.example.Testing;\n        import java.util.*;\n        \n        class Product {\n            String name;\n            double price;\n        \n            public Product(String name, double price) {\n                this.name = name;\n                this.price = price;\n            }\n        }\n        \n        class Cart {\n            List<Product> products;\n        \n            public Cart() {\n                this.products = new ArrayList<>();\n            }\n        \n            public void addProduct(Product product) {\n                products.add(product);\n            }\n        \n            public double getTotalPrice() {\n                double total = 0.0;\n                for (Product product : products) {\n                    total += product.price;\n                }\n                return total;\n            }\n        }\n        \n        class ECommerce {\n            List<Product> products;\n            Cart cart;\n        \n            public ECommerce() {\n                this.products = new ArrayList<>();\n                this.cart = new Cart();\n            }\n        \n            public void addProduct(Product product) {\n                products.add(product);\n            }\n        \n            public void addToCart(Product product) {\n                cart.addProduct(product);\n            }\n        \n            public void checkout() {\n                System.out.println(\"Total price: \" + cart.getTotalPrice());\n                cart = new Cart(); // Empty the cart after checkout\n            }\n        }\n        \n        public class Main {\n            public static void main(String[] args) {\n                ECommerce eCommerce = new ECommerce();\n                eCommerce.addProduct(new Product(\"Product 1\", 10.0));\n                eCommerce.addProduct(new Product(\"Product 2\", 20.0));\n        \n                eCommerce.addToCart(eCommerce.products.get(0)); // Add \"Product 1\" to cart\n                eCommerce.addToCart(eCommerce.products.get(1)); // Add \"Product 2\" to cart\n        \n                eCommerce.checkout(); // Checkout\n            }\n        }\n         \nWrite the Junit Test Cases for the above code.",
                    "PromptType": "Code",
                    "lang": null,
                    "PromptDesc": [],
                    "Code": [
                        {
                            "code": "\"package com.example.Testing;\\n\\n    import org.junit.jupiter.api.BeforeEach;\\n    import org.junit.jupiter.api.Test;\\n    import static org.junit.jupiter.api.Assertions.assertEquals;\\n    \\n    public class ECommerceTest {\\n        private ECommerce eCommerce;\\n        private Product product1;\\n        private Product product2;\\n    \\n        @BeforeEach\\n        public void setup() {\\n            eCommerce = new ECommerce();\\n            product1 = new Product(\\\"Product 1\\\", 10.0);\\n            product2 = new Product(\\\"Product 2\\\", 20.0);\\n        }\\n    \\n        @Test\\n        public void testAddProduct() {\\n            eCommerce.addProduct(product1);\\n            eCommerce.addProduct(product2);\\n            assertEquals(2, eCommerce.products.size());\\n        }\\n    \\n        @Test\\n        public void testAddToCart() {\\n            eCommerce.addProduct(product1);\\n            eCommerce.addToCart(product1);\\n            assertEquals(1, eCommerce.cart.products.size());\\n        }\\n    \\n        @Test\\n        public void testGetTotalPrice() {\\n            eCommerce.addProduct(product1);\\n            eCommerce.addProduct(product2);\\n            eCommerce.addToCart(product1);\\n            eCommerce.addToCart(product2);\\n            assertEquals(30.0, eCommerce.cart.getTotalPrice());\\n        }\\n    \\n        @Test\\n        public void testCheckout() {\\n            eCommerce.addProduct(product1);\\n            eCommerce.addProduct(product2);\\n            eCommerce.addToCart(product1);\\n            eCommerce.addToCart(product2);\\n            eCommerce.checkout();\\n            assertEquals(0, eCommerce.cart.products.size());\\n        }\\n    }\\n    \\n    \"",
                            "id": 1185
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 609,
            "articleName": "Task Manager App Testing",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 3,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JUNIT",
            "video_url": "https://genaiexperiencestorage.blob.core.windows.net/prompt-lib/TaskManagerTesting.mp4?sv=2024-08-04&st=2025-02-27T13%3A54%3A55Z&se=2025-08-26T13%3A54%3A55Z&sr=b&sp=r&sig=8WFzO5fc7T34zXHZ3E4veR%2FiP88bWH5OAp0HI7wTG2c%3D",
            "video_id": 606,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 1225,
                    "Prompt": "    package com.example.Testing;\n      import java.util.*;\n\n    class Task {\n          private String name;\n          private String description;\n\n        public Task(String name, String description) {\n              this.name = name;\n              this.description = description;\n          }\n\n        public String getName() {\n              return name;\n          }\n\n        public void setName(String name) {\n              this.name = name;\n          }\n\n        public String getDescription() {\n              return description;\n          }\n\n        public void setDescription(String description) {\n              this.description = description;\n          }\n      }\n\n    class TaskManager {\n          Map<String, Task> tasks = new HashMap<>();\n\n        public void createTask(String name, String description) {\n              tasks.put(name, new Task(name, description));\n          }\n\n        public void updateTask(String name, String description) {\n              if (tasks.containsKey(name)) {\n                  tasks.get(name).setDescription(description);\n              } else {\n                  System.out.println(\"Task not found\");\n              }\n          }\n\n        public void deleteTask(String name) {\n              tasks.remove(name);\n          }\n\n        public void displayTasks() {\n              for (Task task : tasks.values()) {\n                  System.out.println(\"Task Name: \" + task.getName());\n                  System.out.println(\"Task Description: \" +\n      task.getDescription());\n              }\n          }\n\n        public Map<String, Task> getTasks() {\n              // TODO Auto-generated method stub\n              throw new UnsupportedOperationException(\"Unimplemented method\n      'getTasks'\");\n          }\n      }\n\n    public class Main {\n          public static void main(String[] args) {\n              TaskManager taskManager = new TaskManager();\n              taskManager.createTask(\"Task1\", \"Description1\");\n              taskManager.createTask(\"Task2\", \"Description2\");\n              taskManager.displayTasks();\n              taskManager.updateTask(\"Task1\", \"Updated Description\");\n              taskManager.displayTasks();\n              taskManager.deleteTask(\"Task2\");\n              taskManager.displayTasks();\n          }\n      }\n       \n      Write the Junit Test Cases for the above code.",
                    "PromptType": "Code",
                    "lang": "java",
                    "PromptDesc": [],
                    "Code": [
                        {
                            "code": "\"package com.example.Testing;\\n\\nimport org.junit.jupiter.api.BeforeEach;\\nimport org.junit.jupiter.api.Test;\\nimport static org.junit.jupiter.api.Assertions.*;\\n\\nclass TaskTest {\\n    private Task task;\\n\\n    @BeforeEach\\n    void setUp() {\\n        task = new Task(\\\"Task1\\\", \\\"Description1\\\");\\n    }\\n\\n    @Test\\n    void getName() {\\n        assertEquals(\\\"Task1\\\", task.getName());\\n    }\\n\\n    @Test\\n    void setName() {\\n        task.setName(\\\"NewTask\\\");\\n        assertEquals(\\\"NewTask\\\", task.getName());\\n    }\\n\\n    @Test\\n    void getDescription() {\\n        assertEquals(\\\"Description1\\\", task.getDescription());\\n    }\\n\\n    @Test\\n    void setDescription() {\\n        task.setDescription(\\\"NewDescription\\\");\\n        assertEquals(\\\"NewDescription\\\", task.getDescription());\\n    }\\n}\\n\\nclass TaskManagerTest {\\n    private TaskManager taskManager;\\n\\n    @BeforeEach\\n    void setUp() {\\n        taskManager = new TaskManager();\\n    }\\n\\n    @Test\\n    void createTask() {\\n        taskManager.createTask(\\\"Task1\\\", \\\"Description1\\\");\\n        assertEquals(\\\"Description1\\\", taskManager.tasks.get(\\\"Task1\\\").getDescription());\\n    }\\n\\n    @Test\\n    void updateTask() {\\n        taskManager.createTask(\\\"Task1\\\", \\\"Description1\\\");\\n        taskManager.updateTask(\\\"Task1\\\", \\\"Updated Description\\\");\\n        assertEquals(\\\"Updated Description\\\", taskManager.tasks.get(\\\"Task1\\\").getDescription());\\n    }\\n\\n    @Test\\n    void deleteTask() {\\n        taskManager.createTask(\\\"Task1\\\", \\\"Description1\\\");\\n        taskManager.deleteTask(\\\"Task1\\\");\\n        assertNull(taskManager.tasks.get(\\\"Task1\\\"));\\n    }\\n}\\n\"",
                            "id": 1879
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 614,
            "articleName": "Test creation",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 2,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JASMINE",
            "video_url": null,
            "video_id": 611,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 393,
                    "Prompt": "I have the following HTML 'paso-dos.component.html':\n \n<div *ngIf=\"imagenSeleccionada.ruta\">\n  <h2>Has seleccionado:</h2>\n  <img [src]=\"imagenSeleccionada.ruta\" alt=\"{{ imagenSeleccionada.nombre }}\">\n</div>\n\n<div class=\"formulario\">\n  <div>\n    <h2>Elige un título:</h2>\n    <input type=\"text\" [(ngModel)]=\"valorTextbox\" placeholder=\"Ingrese un valor\">\n  </div>\n\n  <div>\n    <h2>Elige una fecha de cierre:</h2>\n    <mat-form-field>\n      <input matInput [matDatepicker]=\"picker\" (dateChange)=\"onDateSelected($event)\" matDatepickerParse>\n      <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n      <mat-datepicker #picker></mat-datepicker>\n    </mat-form-field>\n  </div>\n\n  <div *ngIf=\"isEncuestaImagenTexto || isEncuestaOpinion\">\n    <h2>Elige el tipo de selección:</h2>\n    <mat-form-field>\n      <mat-select [(ngModel)]=\"selectedType\">\n        <mat-option value=\"simple\">Simple</mat-option>\n        <mat-option value=\"multiple\">Múltiple</mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n  ...\n  ...\nNo hagas nada.",
                    "PromptType": "Code",
                    "lang": null,
                    "PromptDesc": [],
                    "Code": [
                        {
                            "code": "\"I understand that you have provided the HTML code of an Angular component called 'step-two.component.html'.\\nIf you have any specific questions or need assistance with anything related to this code, please feel free to ask. I'm here to help. \\nIf you don't have any questions at the moment, that's okay too. \\nFeel free to come back whenever you need assistance!\"",
                            "id": 633
                        }
                    ]
                },
                {
                    "PromptId": 394,
                    "Prompt": "It also has its 'ts' file:\n  \nimport { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { Emoji } from '../../../interfaces/emoji.model';\nimport { AnyadirGruposTopicComponent } from '../../../anyadir-grupos-topic/anyadir-grupos-topic.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AnyadirCandidatosTopicComponent } from '../../../anyadir-candidatos-topic/anyadir-candidatos-topic.component';\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MomentDateAdapter } from '@angular/material-moment-adapter';\n\nexport const MY_FORMATS = {\n  parse: {\n    dateInput: 'DD/MM/YYYY',\n  },\n  display: {\n    dateInput: 'DD/MM/YYYY',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n};\n\n@Component({\n  selector: 'app-paso-dos',\n  templateUrl: './paso-dos.component.html',\n  styleUrls: ['./paso-dos.component.scss'],\n  providers: [{ provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE] },\n  { provide: MAT_DATE_FORMATS, useValue: MY_FORMATS }]\n})\n...\n...\t  \nDon't do anything.",
                    "PromptType": "Code",
                    "lang": "javascript",
                    "PromptDesc": [],
                    "Code": [
                        {
                            "code": "\"I understand that you have provided the TypeScript code of the 'paso-dos.component.ts' component. This file contains the logic and functionality associated with the component defined in the previously shared HTML file.\\nIf you need specific assistance with any part of this code in the future or if you have any questions, feel free to ask. I'm here to help.\"",
                            "id": 634
                        }
                    ]
                },
                {
                    "PromptId": 395,
                    "Prompt": "Generate the test file using Jasmine and Karma.",
                    "PromptType": null,
                    "lang": "javascript",
                    "PromptDesc": [
                        {
                            "desc": "\nMake sure to adjust these tests according to the actual structure of your project and the dependencies used. You can add more tests to cover additional scenarios and functionalities of the PasoDosComponent component.\n\nNOTE: At this point, we begin debugging these tests by commenting on the errors it was encountering to the chat.",
                            "id": 534
                        }
                    ],
                    "Code": [
                        {
                            "code": "\"import { ComponentFixture, TestBed } from '@angular/core/testing';\\nimport { MatDialog } from '@angular/material/dialog';\\nimport { MomentDateAdapter } from '@angular/material-moment-adapter';\\nimport { MatNativeDateModule } from '@angular/material/core';\\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\\nimport { FormsModule } from '@angular/forms';\\nimport { of } from 'rxjs';\\n\\nimport { PasoDosComponent, MY_FORMATS } from './paso-dos.component';\\nimport { AnyadirGruposTopicComponent } from '../../../anyadir-grupos-topic/anyadir-grupos-topic.component';\\nimport { AnyadirCandidatosTopicComponent } from '../../../anyadir-candidatos-topic/anyadir-candidatos-topic.component';\\n\\ndescribe('PasoDosComponent', () => {\\n  let component: PasoDosComponent;\\n  let fixture: ComponentFixture<PasoDosComponent>;\\n  let mockMatDialog: jasmine.SpyObj<MatDialog>;\\n\\n  beforeEach(async () => {\\n    mockMatDialog = jasmine.createSpyObj('MatDialog', ['open']);\\n\\n    await TestBed.configureTestingModule({\\n      declarations: [PasoDosComponent],\\n      imports: [\\n        BrowserAnimationsModule,\\n        FormsModule,\\n        MatNativeDateModule\\n      ],\\n      providers: [\\n        { provide: MatDialog, useValue: mockMatDialog },\\n        { provide: MomentDateAdapter },\\n        { provide: MY_FORMATS }\\n      ]\\n    }).compileComponents();\\n  });\\n\\n  beforeEach(() => {\\n    fixture = TestBed.createComponent(PasoDosComponent);\\n    component = fixture.componentInstance;\\n    fixture.detectChanges();\\n  });\\n\\n  it('should create', () => {\\n    expect(component).toBeTruthy();\\n  });\\n\\n  it('should open AnyadirParticipantes dialog', () => {\\n    const mockDialogRef = jasmine.createSpyObj('MatDialogRef', ['afterClosed']);\\n    mockMatDialog.open.and.returnValue(mockDialogRef);\\n    mockDialogRef.afterClosed.and.returnValue(of({ grupoSeleccionado: [], usuariosSeleccionados: [] }));\\n\\n    component.openAnyadirParticipantes();\\n\\n    expect(mockMatDialog.open).toHaveBeenCalledWith(AnyadirGruposTopicComponent, {\\n      width: '400px',\\n      data: {}\\n    });\\n  });\\n\\n  it('should set selectedGroup and users on AnyadirParticipantes dialog close', () => {\\n    const mockDialogRef = jasmine.createSpyObj('MatDialogRef', ['afterClosed']);\\n    mockMatDialog.open.and.returnValue(mockDialogRef);\\n    mockDialogRef.afterClosed.and.returnValue(of({ grupoSeleccionado: ['Group1'], usuariosSeleccionados: ['User1'] }));\\n\\n    component.openAnyadirParticipantes();\\n\\n    expect(component.selectedGroup).toEqual(['Group1']);\\n    expect(component.users).toEqual(['User1']);\\n  });\\n\\n  it('should update fechaCierre on date selection', () => {\\n    const event = { value: new Date(2023, 8, 8) };\\n    component.onDateSelected(event);\\n    expect(component.fechaCierre).toBe('08/09/2023');\\n  });\\n\\n  it('should correctly format fechaString', () => {\\n    const formattedDate = component.formatearFecha('2023-08-08');\\n    expect(formattedDate).toBe('08/08/2023');\\n  });\\n\\n  // More tests can be added for other component methods and functionalities\\n});\\t  \\n\"",
                            "id": 635
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 626,
            "articleName": "Snapshot Testing",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 1,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JEST",
            "video_url": "https://genaiexperiencestorage.blob.core.windows.net/prompt-lib/Snapshot-Testing.mp4?sv=2024-08-04&st=2025-02-27T13%3A54%3A57Z&se=2025-08-26T13%3A54%3A57Z&sr=b&sp=r&sig=RhgTsjmkJmQ1ulublXgIu1SFI3jf8rkw64%2FLTrwJfxg%3D",
            "video_id": 623,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 348,
                    "Prompt": "Write Snapshot Unit Test Cases for Header Component.",
                    "PromptType": null,
                    "lang": "javascript",
                    "PromptDesc": [],
                    "Code": [
                        {
                            "code": "\"\\n    import { render } from '@testing-library/react';\\n    import Head from '../../../../Components/Reusable/Header/Head';\\n    import '@testing-library/jest-dom/extend-expect';\\n    \\n    describe('Header Component', () => {\\n      it('should match to snapshot', () => {\\n        window.matchMedia = matchMediaMock.create();\\n        const domTree = render(<Head />);\\n        expect(domTree).toMatchSnapshot();\\n      });\\n    });  \\nNOTE: We have use inline comments to get mock router and matchMediaMock.\\n\\n\\n    //write snapshot unit test cases for Header component.\\n    import { render } from '@testing-library/react';\\n    import Head from '../../../../Components/Reusable/Header/Head';\\n    import '@testing-library/jest-dom/extend-expect';\\n    //can you import matchMedia for this test case.\\n    import matchMediaMock from 'match-media-mock';\\n    \\n    //can you please add jest mock router for this test case.\\n    //please add mock router for this test case.\\n    const mockedUsedNavigate = jest.fn(); \\n    jest.mock(\\\"react-router-dom\\\", () => ({\\n      ...jest.requireActual(\\\"react-router-dom\\\"),\\n      useNavigate: () => mockedUsedNavigate,\\n    \\n    }));\\n\\n    describe('Header Component', () => {\\n      it('should match to snapshot', () => {\\n        window.matchMedia = matchMediaMock.create();\\n        const domTree = render(<Head />);\\n        expect(domTree).toMatchSnapshot();\\n      });\\n    });\\n\\n\\n\"",
                            "id": 576
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 627,
            "articleName": "User Registration Unit Test Case",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 1,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JEST",
            "video_url": "https://genaiexperiencestorage.blob.core.windows.net/prompt-lib/UserRegistration-TestCase-AmazonQ.mp4?sv=2024-08-04&st=2025-02-27T13%3A54%3A57Z&se=2025-08-26T13%3A54%3A57Z&sr=b&sp=r&sig=Uak2tjd1IZ135pO%2BEF%2BIZmWCxDD0FgbqQe1609sscH8%3D",
            "video_id": 624,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 908,
                    "Prompt": "Create a unit test case by using jest\n                const express = require('express');\nconst router = express.Router();\nconst User = require('../model/db.config');\n \nrouter.post('/register', async (req, res) => {\n    try {\n        const { username, email, password, dateOfBirth, gender, agreedToTerms } = req.body;\n   \n        // Create a new user\n        const user = await User.UserRegistration.create({\n          username,\n          email,\n          password,\n          dateOfBirth,\n          gender,\n          agreedToTerms,\n        });\n   \n        // Respond with a success message\n        res.json({ message: 'User registered successfully!', user });\n      } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: 'Internal server error' });\n      }\n    });\nmodule.exports = router;\n            ",
                    "PromptType": "Code",
                    "lang": "javascript",
                    "PromptDesc": [
                        {
                            "desc": "Here is how I would write a unit test case for the user registration route using Jest: [1]\nThis tests the registration route by making requests with valid and invalid user data. We use the Supertest library to simulate requests and make assertions on the response. Jest allows us to easily test edge cases like missing required fields.",
                            "id": 1106
                        }
                    ],
                    "Code": [
                        {
                            "code": "\" const app = require('../app');  \\n                    describe('POST /register', () => {\\n                      it('registers a new user', async () => {\\n                        const user = {\\n                          username: 'test',\\n                          email: 'test@email.com', \\n                          password: 'password',\\n                          dateOfBirth: '1990-01-01',\\n                          gender: 'Male',\\n                          agreedToTerms: true\\n                        }; \\n                        const res = await request(app)\\n                          .post('/register')\\n                          .send(user);   \\n                        expect(res.statusCode).toEqual(200);\\n                        expect(res.body.message).toEqual('User registered successfully!');\\n                        expect(res.body.user).toHaveProperty('id');\\n                      });\\n                      it('returns an error if required fields are missing', async () => {\\n                        const user = {\\n                          email: 'test@email.com',\\n                          password: 'password'  \\n                        };\\n                        const res = await request(app)\\n                          .post('/register')\\n                          .send(user);\\n                        expect(res.statusCode).toEqual(500);\\n                        expect(res.body.message).toEqual('Internal server error');\\n                      });\\n                    });\\n            \\n        \"",
                            "id": 1389
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 632,
            "articleName": "Junit Testcase For Spring Batch",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": null,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": null,
            "video_url": null,
            "video_id": 629,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 764,
                    "Prompt": "Generate junit test case for spring batch",
                    "PromptType": null,
                    "lang": "java",
                    "PromptDesc": [
                        {
                            "desc": "Sure, here's an example JUnit test case for a Spring Batch application:\n\nThis test case uses the @Autowired annotation to inject a JobLauncher and a Job instance, which are used to execute the job and retrieve its status. The setUp() method is used to set up any dependencies required for the test, such as a database connection or file system access. The testJobExecution() method creates a new job execution using the jobLauncher.run() method, passing in the job instance and an empty JobParameters object. The waitForCompletion() method is then called on the JobExecution object to wait for the job to complete. Finally, the status of the job is checked using the getStatus() method, and asserted to be BatchStatus.COMPLETED. You can extend this test case to include additional assertions or testing logic as needed. For example, you could assert that the job executed successfully by checking the output of the job, or that the job failed with a specific exception. You could also test the behavior of the job under different conditions, such as when the job fails or when the input data is incomplete. Note that this is just one example of how you could test a Spring Batch job using JUnit. There are many other ways to test a job, and the specific approach will depend on the requirements of your application.\n                    }\n                }\n                \n        ",
                            "id": 966
                        }
                    ],
                    "Code": [
                        {
                            "code": "\"            import org.junit.Before;\\n                import org.junit.Test;\\n                import org.junit.runner.RunWith;\\n                import org.springframework.batch.core.BatchStatus;\\n                import org.springframework.batch.core.Job;\\n                import org.springframework.batch.core.JobExecution;\\n                import org.springframework.batch.core.JobParameters;\\n                import org.springframework.batch.core.JobParameter;\\n                import org.springframework.batch.core.launch.JobLauncher;\\n                import org.springframework.beans.factory.annotation.Autowired;\\n                import org.springframework.test.context.ContextConfiguration;\\n                import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\\n                \\n                @RunWith(SpringJUnit4ClassRunner.class)\\n                @ContextConfiguration(\\\"classpath:spring-batch-test.xml\\\")\\n                public class MyBatchJobTest {\\n                \\n                    @Autowired\\n                    private JobLauncher jobLauncher;\\n                \\n                    @Autowired\\n                    private Job job;\\n                \\n                    @Before\\n                    public void setUp() {\\n                        // Set up any dependencies required for the test\\n                    }\\n                \\n                    @Test\\n                    public void testJobExecution() {\\n                        // Create a new job execution\\n                        JobExecution jobExecution = jobLauncher.run(job, new JobParameters());\\n                \\n                        // Wait for the job to complete\\n                        jobExecution.waitForCompletion();\\n                \\n                        // Check the status of the job\\n                        BatchStatus status = jobExecution.getStatus();\\n                        assertEquals(BatchStatus.COMPLETED, status);\\n   \"",
                            "id": 1191
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 637,
            "articleName": "Sum Of Two Numbers Function Testing In React",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 1,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JEST",
            "video_url": "https://genaiexperiencestorage.blob.core.windows.net/prompt-lib/Adding-two-nos-testing-in-react.mp4?sv=2024-08-04&st=2025-02-27T13%3A54%3A58Z&se=2025-08-26T13%3A54%3A58Z&sr=b&sp=r&sig=HQIsYX52aPfmaCJXCgWzVCyBhSjTdjURuLw0ku9keeg%3D",
            "video_id": 634,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 609,
                    "Prompt": "const addTwoNos = (a, b) => a + b; \nGive test cases in react",
                    "PromptType": "Code",
                    "lang": "javascript",
                    "PromptDesc": [
                        {
                            "desc": "Sure! Here are some test cases for the addTwoNos function in React:\n Make sure to replace './your-file' with the correct path to the file where the addTwoNos function is defined in your project.",
                            "id": 828
                        }
                    ],
                    "Code": [
                        {
                            "code": "\"import React from 'react'; \\n                import { render } from '@testing-library/react'; \\n                import { addTwoNos } from './your-file'; // Replace with the correct path to your file \\n                 \\n                test('adds two numbers correctly', () => { \\n                  const result = addTwoNos(2, 3); \\n                  expect(result).toBe(5); \\n                }); \\n                 \\n                test('handles negative numbers', () => { \\n                  const result = addTwoNos(-5, -7); \\n                  expect(result).toBe(-12); \\n                }); \\n                 \\n                test('handles decimal numbers', () => { \\n                  const result = addTwoNos(1.5, 2.25); \\n                  expect(result).toBe(3.75); \\n                }); \\n           \"",
                            "id": 981
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 640,
            "articleName": "Writing Assistance Testing In React",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 1,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JEST",
            "video_url": "https://genaiexperiencestorage.blob.core.windows.net/prompt-lib/Writing assistance testing in react.mp4?sv=2024-08-04&st=2025-02-27T13%3A54%3A59Z&se=2025-08-26T13%3A54%3A59Z&sr=b&sp=r&sig=IIxjfKS0e5D4QhpTWeFb0hEIvhNXQh6uoD9fPbKfPH8%3D",
            "video_id": 637,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 417,
                    "Prompt": "Provide test cases in jest for react\n\n const [text, setText] = useState(''); \n                const handleInputChange = (event) => {   \n                  setText(event.target.value);   \n                  };\n",
                    "PromptType": "Code",
                    "lang": "javascript",
                    "PromptDesc": [],
                    "Code": [
                        {
                            "code": "\"import React from 'react';\\n                    import { render, fireEvent } from '@testing-library/react';\\n                    import YourComponent from './YourComponent';\\n                    \\n                    test('handleInputChange updates text state', () => {\\n                      const { getByTestId } = render(<YourComponent />);\\n                      const input = getByTestId('input-testid');\\n                    \\n                      fireEvent.change(input, { target: { value: 'test input' } });\\n                    \\n                      expect(input.value).toBe('test input');\\n                    });\\n                     \\n                    \"",
                            "id": 674
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 646,
            "articleName": "Testing For Map Functionality In React",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 1,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JEST",
            "video_url": "https://genaiexperiencestorage.blob.core.windows.net/prompt-lib/Map-functionality-testing-in-react.mp4?sv=2024-08-04&st=2025-02-27T13%3A55%3A01Z&se=2025-08-26T13%3A55%3A01Z&sr=b&sp=r&sig=54AUaMDTHs1HwIqVYMYvpjdmLXufY7GThq1eTGPRRP4%3D",
            "video_id": 643,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 773,
                    "Prompt": "const fruits = ['Apple', 'Banana', 'Orange', 'Grapes']; // Using map to create a new array of JSX elements const fruitList = fruits.map((fruit, index) => (\n{fruit}\n)); provide test cases in react for test.js",
                    "PromptType": "Code",
                    "lang": "javascript",
                    "PromptDesc": [
                        {
                            "desc": "Here are some test cases you could write for the code sample provided:\n  The key changes: Add async keyword to test function Use screen.findAllByRole to await rendering Use item.getAttribute('key') instead of directly accessing attribute Also await the attribute promise inside the forEach This ensures the DOM is fully updated before making assertions on the key attributes.",
                            "id": 973
                        }
                    ],
                    "Code": [
                        {
                            "code": "\"import { render, screen } from '@testing-library/react';\\n\\n                describe('Fruit list test', () => {\\n                  // Test rendering\\n                  it('renders fruit list', () => {\\n                    // Render component\\n                    render(<FruitList fruits={fruits} />);\\n\\n                    // Assert each fruit is rendered\\n                    expect(screen.getByText('Apple')).toBeInTheDocument();\\n                    expect(screen.getByText('Banana')).toBeInTheDocument();\\n                    expect(screen.getByText('Orange')).toBeInTheDocument();\\n                    expect(screen.getByText('Grapes')).toBeInTheDocument();\\n                  });\\n\\n                  // Test length\\n                  it('renders correct number of fruits', () => {\\n                    // Render and get list\\n                    render(<FruitList fruits={fruits} />);\\n                    const list = screen.getByRole('list');\\n\\n                    // Assert length\\n                    expect(list.children.length).toEqual(fruits.length);\\n                  });\\n\\n                  // Test keys\\n                  it('assigns unique keys', async () => {\\n                    // Render\\n                    render(<FruitList fruits={fruits} />);\\n                    \\n                    // Wait for all list items\\n                    await screen.findAllByRole('listitem');\\n                    \\n                    // Get all items after await\\n                    const items = screen.getAllByRole('listitem');\\n\\n                    // Assert keys\\n                    items.forEach(async (item, index) => {\\n                      expect(await item.getAttribute('key')).toEqual(index.toString());\\n                    });\\n                  });\\n                });\"",
                            "id": 1200
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 651,
            "articleName": "Razor-Pay UnitTest Documentation",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 1,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JEST",
            "video_url": "https://genaiexperiencestorage.blob.core.windows.net/prompt-lib/RazorPay-UnitTest-Refactoring.mp4?sv=2024-08-04&st=2025-02-27T13%3A55%3A02Z&se=2025-08-26T13%3A55%3A02Z&sr=b&sp=r&sig=mZKOf9MaCq0kErkxqpfpKHrJcbf35GZF2qZy%2BiiFuQ4%3D",
            "video_id": 648,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 991,
                    "Prompt": " import React from 'react';\n                import { Button } from 'react-bootstrap';\n                 \n                const loadScript = (src) => {\n                  return new Promise((resolve) => {\n                    const script = document.createElement('script');\n                    script.src = src;\n                    script.onload = () => {\n                      resolve(true);\n                    };\n                    script.onerror = () => {\n                      resolve(false);\n                    };\n                    document.body.appendChild(script);\n                  });\n                };\n\n                 \n                const Razorpay = () => {\n                 \n                  async function displayRazorpay(e) {\n                    e.preventDefault();\n                    const res = await loadScript(\n                      'https://checkout.razorpay.com/v1/checkout.js'\n                    );\n                    if (!res) {\n                      alert('Razorpay SDK failed to load. Are you online?');\n                    }\n                 \n                    const options = {\n                      key: 'rzp_test_NsF3LXG1WJdj6a',\n                      currency: 'INR',\n                      amount: 50000 * 100,\n                      name: 'Mobile',\n                      description: 'Thank you for shopping with us',\n                      image: 'https://cdn.razorpay.com/logos/7K3b6d18wHwKzL_medium.png',\n                      handler: function (response) {\n                        alert(response.razorpay_payment_id);\n                        alert(response.razorpay_order_id);\n                        alert(response.razorpay_signature);\n                      },\n                    };\n                    const paymentObject = new window.Razorpay(options);\n                    paymentObject.open();\n                  }\n                 \n                  return (\n                    <>\n                      <Button onClick={displayRazorpay}>Pay</Button>\n                    </>\n                  );\n                };\n                export default Razorpay;\n                 Give Unit test case for above code\n                \n            ",
                    "PromptType": "Code",
                    "lang": "javascript",
                    "PromptDesc": [
                        {
                            "desc": "Sure, here's an example of a unit test case for the given React component using Jest and React Testing Library:",
                            "id": 1205
                        }
                    ],
                    "Code": [
                        {
                            "code": "\" import React from 'react';\\n                    import { render, fireEvent, waitFor } from '@testing-library/react';\\n                    import Razorpay from './Razorpay'; // Assuming this file is in the same directory\\n                    \\n                    describe('Razorpay component', () => {\\n                      test('renders Pay button', () => {\\n                        const { getByText } = render(<Razorpay />);\\n                        const payButton = getByText('Pay');\\n                        expect(payButton).toBeInTheDocument();\\n                      });\\n                    \\n                      test('clicking Pay button invokes Razorpay checkout', async () => {\\n                        const { getByText } = render(<Razorpay />);\\n                        const payButton = getByText('Pay');\\n                        \\n                        window.Razorpay = jest.fn().mockImplementation(() => ({\\n                          open: jest.fn(),\\n                        }));\\n                    \\n                        fireEvent.click(payButton);\\n                    \\n                        await waitFor(() => {\\n                          expect(window.Razorpay).toHaveBeenCalledTimes(1);\\n                          expect(window.Razorpay).toHaveBeenCalledWith(expect.objectContaining({\\n                            key: 'rzp_test_NsF3LXG1WJdj6a',\\n                            currency: 'INR',\\n                            amount: 50000 * 100,\\n                            name: 'Mobile',\\n                            description: 'Thank you for shopping with us',\\n                            image: 'https://cdn.razorpay.com/logos/7K3b6d18wHwKzL_medium.png',\\n                          }));\\n                          expect(window.Razorpay().open).toHaveBeenCalledTimes(1);\\n                        });\\n                      });\\n                    });\\n                     \\n                    \\n            This example uses Jest and React Testing Library to test the rendering of the \\\"Pay\\\" button and simulate a click on it. The test checks whether the Razorpay checkout function is invoked with the expected options when the button is clicked. It also ensures that the open() method of the Razorpay object is called once. Mock functions are used to simulate the behavior of the Razorpay library within the test environment.\"",
                            "id": 1519
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 1052,
            "articleName": "Weather Widget React Component Testing ",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 1,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JEST",
            "video_url": null,
            "video_id": 1047,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 1059,
                    "Prompt": "// WeatherWidget.js\nimport React, { useState } from 'react';\n\nconst WeatherWidget = () => {\n    const [city, setCity] = useState('');\n    const [weather, setWeather] = useState(null);\n    const [error, setError] = useState('');\n\n    const fetchWeather = async () => {\n        if (!city.trim()) {\n            setError('Please enter a city name');\n            return;\n        }\n        setError('');\n        setWeather(null);\n\n        try {\n            // Mock API URL (Replace with actual API URL in real scenarios)\n            const response = await fetch(`https://api.mockweather.com/weather?city=${city}`);\n            const data = await response.json();\n            if (response.ok) {\n                setWeather(data);\n            } else {\n                setError('City not found');\n            }\n        } catch (err) {\n            setError('Error fetching weather data');\n        }\n    };\n\n    return (\n        <div>\n            <h1>Weather Widget</h1>\n            <input\n                type=\"text\"\n                value={city}\n                onChange={(e) => setCity(e.target.value)}\n                placeholder=\"Enter city name\"\n                data-testid=\"city-input\"\n            />\n            <button onClick={fetchWeather} data-testid=\"fetch-weather-btn\">Fetch Weather</button>\n            {error && <p data-testid=\"error-message\">{error}</p>}\n            {weather && (\n                <div data-testid=\"weather-info\">\n                    <p>City: {weather.city}</p>\n                    <p>Temperature: {weather.temperature} °C</p>\n                    <p>Condition: {weather.condition}</p>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default WeatherWidget;\nwrite unit test cases of that file",
                    "PromptType": "Code",
                    "lang": null,
                    "PromptDesc": [
                        {
                            "desc": "Test Cases\nWe will create the test cases in a file named WeatherWidget.test.js.\n\nHere are the scenarios we will test:\n\nRenders the WeatherWidget component correctly.\nShows an error message when trying to fetch weather with an empty city input.\nFetches and displays weather information for a valid city input.\nDisplays an error message when the fetch request fails.\nDisplays an error message when the city is not found.",
                            "id": 1283
                        }
                    ],
                    "Code": [
                        {
                            "code": "\"// WeatherWidget.test.js\\nimport React from 'react';\\nimport { render, fireEvent, waitFor } from '@testing-library/react';\\nimport '@testing-library/jest-dom/extend-expect';\\nimport WeatherWidget from '../components/weather';\\n\\n// Mock the fetch function globally\\nglobal.fetch = jest.fn();\\n\\nbeforeEach(() => {\\n    // Clear mock calls and results before each test\\n    fetch.mockClear();\\n});\\n\\ntest('renders WeatherWidget component correctly', () => {\\n    const { getByText, getByPlaceholderText, getByTestId } = render(<WeatherWidget />);\\n\\n    expect(getByText('Weather Widget')).toBeInTheDocument();\\n    expect(getByPlaceholderText('Enter city name')).toBeInTheDocument();\\n    expect(getByTestId('fetch-weather-btn')).toBeInTheDocument();\\n});\\n\\ntest('shows error message when city input is empty and fetch weather is clicked', () => {\\n    const { getByTestId, getByText } = render(<WeatherWidget />);\\n\\n    fireEvent.click(getByTestId('fetch-weather-btn'));\\n\\n    expect(getByText('Please enter a city name')).toBeInTheDocument();\\n});\\n\\ntest('fetches and displays weather information on valid input', async () => {\\n    fetch.mockResolvedValueOnce({\\n        ok: true,\\n        json: async () => ({\\n            city: 'Mock City',\\n            temperature: 25,\\n            condition: 'Sunny',\\n        }),\\n    });\\n\\n    const { getByTestId, getByText } = render(<WeatherWidget />);\\n\\n    fireEvent.change(getByTestId('city-input'), { target: { value: 'Mock City' } });\\n    fireEvent.click(getByTestId('fetch-weather-btn'));\\n\\n    await waitFor(() => expect(getByTestId('weather-info')).toBeInTheDocument());\\n\\n    expect(getByText('City: Mock City')).toBeInTheDocument();\\n    expect(getByText('Temperature: 25 °C')).toBeInTheDocument();\\n    expect(getByText('Condition: Sunny')).toBeInTheDocument();\\n});\\n\\ntest('displays error message when fetch fails', async () => {\\n    fetch.mockRejectedValueOnce(new Error('Failed to fetch'));\\n\\n    const { getByTestId, getByText } = render(<WeatherWidget />);\\n\\n    fireEvent.change(getByTestId('city-input'), { target: { value: 'Mock City' } });\\n    fireEvent.click(getByTestId('fetch-weather-btn'));\\n\\n    await waitFor(() => expect(getByText('Error fetching weather data')).toBeInTheDocument());\\n});\\n\\ntest('displays error message when city is not found', async () => {\\n    fetch.mockResolvedValueOnce({\\n        ok: false,\\n        json: async () => ({ message: 'City not found' }),\\n    });\\n\\n    const { getByTestId, getByText } = render(<WeatherWidget />);\\n\\n    fireEvent.change(getByTestId('city-input'), { target: { value: 'Unknown City' } });\\n    fireEvent.click(getByTestId('fetch-weather-btn'));\\n\\n    await waitFor(() => expect(getByText('City not found')).toBeInTheDocument());\\n});\\n\"",
                            "id": 1621
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 1053,
            "articleName": "User List Component Testing ",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 1,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JEST",
            "video_url": null,
            "video_id": 1048,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 1060,
                    "Prompt": "// UserList.js\nimport React, { useState, useEffect } from 'react';\n\nconst UserList = () => {\n    const [users, setUsers] = useState([]);\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        const fetchUsers = async () => {\n            setLoading(true);\n            try {\n                const response = await fetch('https://jsonplaceholder.typicode.com/users');\n                if (!response.ok) {\n                    throw new Error('Failed to fetch users');\n                }\n                const data = await response.json();\n                setUsers(data);\n            } catch (error) {\n                setError(error.message);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchUsers();\n    }, []);\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    if (error) {\n        return <div>Error: {error}</div>;\n    }\n\n    return (\n        <div>\n            <h1>User List</h1>\n            <ul>\n                {users.map(user => (\n                    <li key={user.id}>\n                        <strong>{user.name}</strong> - {user.email}\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default UserList;\n",
                    "PromptType": "Code",
                    "lang": null,
                    "PromptDesc": [
                        {
                            "desc": "Certainly! Let's write unit test cases for the UserList component using Jest and React Testing Library. We'll cover scenarios such as loading state, error state, and successful data rendering.\n\nUnit Test Cases for UserList Component\nCreate a file named UserList.test.js and add the following test cases:",
                            "id": 1284
                        },
                        {
                            "desc": "Explanation\nMocking Fetch API: We use jest.fn() to mock the fetch function globally. This allows us to simulate API responses in our tests without making actual network requests.\nTesting Loading State: We first verify that the component displays \"Loading...\" while it's fetching data by checking for the presence of the text \"Loading...\".\nTesting Error State: We simulate a failed fetch request by using fetch.mockRejectedValueOnce to throw an error. We then verify that the component displays the correct error message.\nTesting Data Rendering: We mock a successful fetch request using fetch.mockResolvedValueOnce with sample user data. After the data is fetched, we ensure that the user list is rendered correctly by checking for specific user details in the rendered output.",
                            "id": 1285
                        }
                    ],
                    "Code": [
                        {
                            "code": "\"// UserList.test.js\\nimport React from 'react';\\nimport { render, waitFor } from '@testing-library/react';\\nimport '@testing-library/jest-dom/extend-expect';\\nimport UserList from '../components/UserList';\\n\\n// Mock the fetch function globally\\nglobal.fetch = jest.fn();\\n\\nbeforeEach(() => {\\n    // Clear mock calls and results before each test\\n    fetch.mockClear();\\n});\\n\\ntest('renders UserList component correctly', async () => {\\n    fetch.mockResolvedValueOnce({\\n        ok: true,\\n        json: async () => ([{ id: 1, name: 'John Doe', email: 'john.doe@example.com' }])\\n    });\\n\\n    const { getByText, getByTestId } = render(<UserList />);\\n\\n    expect(getByText('Loading...')).toBeInTheDocument();\\n\\n    await waitFor(() => expect(getByText('User List')).toBeInTheDocument());\\n\\n    expect(getByText('John Doe')).toBeInTheDocument();\\n});\\n\\ntest('renders error message when fetch fails', async () => {\\n    fetch.mockRejectedValueOnce(new Error('Failed to fetch users'));\\n\\n    const { getByText } = render(<UserList />);\\n\\n    expect(getByText('Loading...')).toBeInTheDocument();\\n\\n    await waitFor(() => expect(getByText('Error: Failed to fetch users')).toBeInTheDocument());\\n});\\n\\ntest('renders list of users fetched from API', async () => {\\n    fetch.mockResolvedValueOnce({\\n        ok: true,\\n        json: async () => ([{ id: 1, name: 'John Doe', email: 'john.doe@example.com' }])\\n    });\\n\\n    const { getByText } = render(<UserList />);\\n\\n    await waitFor(() => expect(getByText('User List')).toBeInTheDocument());\\n\\n    expect(getByText('John Doe')).toBeInTheDocument();\\n});\\n\"",
                            "id": 1622
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 1057,
            "articleName": "React Button Component Testing ",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 1,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JEST",
            "video_url": null,
            "video_id": 1052,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 1062,
                    "Prompt": "// src/components/Button.js\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './Button.css'; // Assuming you have some styles\n\nconst Button = ({ onClick, children, disabled, className }) => (\n  <button \n    onClick={onClick} \n    disabled={disabled} \n    className={button ${className}}\n  >\n    {children}\n  </button>\n);\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n  disabled: PropTypes.bool,\n  className: PropTypes.string,\n};\n\nButton.defaultProps = {\n  disabled: false,\n  className: '',\n};\n\nexport default Button;\nGenerate unit test cases for this file ",
                    "PromptType": "Code",
                    "lang": null,
                    "PromptDesc": [
                        {
                            "desc": "To generate unit test cases for the Button component, we will use Jest and React Testing Library. These tests will cover the following scenarios:\n\nRendering: Check if the button renders correctly with the provided text.\nClick Handling: Verify that the button calls the onClick function when clicked.\nDisabled State: Ensure that the button is disabled when the disabled prop is true.\nClass Name: Check if the button has the correct class when a custom className is provided.\nLet's create a test file Button.test.js with these test cases.",
                            "id": 1286
                        },
                        {
                            "desc": "Explanation of Each Test Case:\nRendering with Text:\n\nWe render the Button component with the text \"Click me\".\nWe check if the button element with this text is present in the document using screen.getByText.\nClick Handling:\n\nWe create a mock function handleClick using jest.fn().\nWe render the Button component with this mock function as the onClick handler.\nWe simulate a click on the button and check if the mock function was called using expect(handleClick).toHaveBeenCalledTimes(1).\nDisabled State:\n\nWe render the Button component with the disabled prop set to true.\nWe verify that the button is disabled using expect(buttonElement).toBeDisabled().\nClass Name:\n\nWe render the Button component with a custom className of \"custom-class\".\nWe check if the button has the correct class names, including the default \"button\" class and the custom class using expect(buttonElement).toHaveClass.\nClick Handling when Disabled:\n\nWe render the Button component with the disabled prop set to true and a mock function as the onClick handler.\nWe simulate a click on the button and verify that the mock function was not called using expect(handleClick).not.toHaveBeenCalled().",
                            "id": 1287
                        }
                    ],
                    "Code": [
                        {
                            "code": "\"// src/components/Button.test.js\\n\\nimport React from 'react';\\nimport { render, screen, fireEvent } from '@testing-library/react';\\nimport Button from './Button';\\n\\n// Test if the button renders with the correct text\\ntest('renders button with given text', () => {\\n  render(<Button onClick={() => {}}>Click me</Button>);\\n  const buttonElement = screen.getByText(/click me/i);\\n  expect(buttonElement).toBeInTheDocument();\\n});\\n\\n// Test if the button calls the onClick function when clicked\\ntest('calls onClick function when clicked', () => {\\n  const handleClick = jest.fn();\\n  render(<Button onClick={handleClick}>Click me</Button>);\\n  const buttonElement = screen.getByText(/click me/i);\\n  fireEvent.click(buttonElement);\\n  expect(handleClick).toHaveBeenCalledTimes(1);\\n});\\n\\n// Test if the button is disabled when the disabled prop is true\\ntest('is disabled when disabled prop is true', () => {\\n  render(<Button onClick={() => {}} disabled>Click me</Button>);\\n  const buttonElement = screen.getByText(/click me/i);\\n  expect(buttonElement).toBeDisabled();\\n});\\n\\n// Test if the button has the correct class when a className is provided\\ntest('has correct class when className is provided', () => {\\n  render(<Button onClick={() => {}} className=\\\"custom-class\\\">Click me</Button>);\\n  const buttonElement = screen.getByText(/click me/i);\\n  expect(buttonElement).toHaveClass('button custom-class');\\n});\\n\\n// Test if the button does not call onClick when disabled\\ntest('does not call onClick function when disabled', () => {\\n  const handleClick = jest.fn();\\n  render(<Button onClick={handleClick} disabled>Click me</Button>);\\n  const buttonElement = screen.getByText(/click me/i);\\n  fireEvent.click(buttonElement);\\n  expect(handleClick).not.toHaveBeenCalled();\\n});\\n\"",
                            "id": 1624
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 1058,
            "articleName": "ToggleSwitch React Component Testing ",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 1,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JEST",
            "video_url": null,
            "video_id": 1053,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 1063,
                    "Prompt": "// src/components/ToggleSwitch.js\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst ToggleSwitch = ({ onToggle, initialState, className }) => {\n  const [isOn, setIsOn] = useState(initialState);\n\n  const handleClick = () => {\n    const newState = !isOn;\n    setIsOn(newState);\n    onToggle(newState);\n  };\n\n  return (\n    <div \n      className={`toggle-switch ${isOn ? 'on' : 'off'} ${className}`}\n      onClick={handleClick}\n      role=\"button\"\n      aria-pressed={isOn}\n    >\n      {isOn ? 'On' : 'Off'}\n    </div>\n  );\n};\n\nToggleSwitch.propTypes = {\n  onToggle: PropTypes.func.isRequired,\n  initialState: PropTypes.bool,\n  className: PropTypes.string,\n};\n\nToggleSwitch.defaultProps = {\n  initialState: false,\n  className: '',\n};\n\nexport default ToggleSwitch;\nwrite unit tests cases for this file",
                    "PromptType": "Code",
                    "lang": null,
                    "PromptDesc": [
                        {
                            "desc": "To write unit test cases for the ToggleSwitch component, we will use Jest and React Testing Library. The test cases will verify that:\n\nThe component renders correctly with the initial state.\nThe component toggles its state and calls the onToggle function with the new state when clicked.\nThe component handles a custom class name properly.\nCreate a test file named ToggleSwitch.test.js in the same directory as your component.",
                            "id": 1288
                        },
                        {
                            "desc": "Explanation of Each Test Case:\nInitial State \"Off\":\n\nWe render the ToggleSwitch component with initialState set to false.\nWe verify that the element is present in the document with the text \"Off\".\nWe check that the component has the class off.\nInitial State \"On\":\n\nWe render the ToggleSwitch component with initialState set to true.\nWe verify that the element is present in the document with the text \"On\".\nWe check that the component has the class on.\nToggling from \"Off\" to \"On\":\n\nWe render the ToggleSwitch component with initialState set to false and a mock onToggle function.\nWe simulate a click and check if the mock function is called with true.\nWe verify that the button now displays \"On\" and has the class on.\nToggling from \"On\" to \"Off\":\n\nWe render the ToggleSwitch component with initialState set to true and a mock onToggle function.\nWe simulate a click and check if the mock function is called with false.\nWe verify that the button now displays \"Off\" and has the class off.\nCustom Class:\n\nWe render the ToggleSwitch component with a custom className of \"custom-class\".\nWe check if the toggle switch has the combined classes toggle-switch and custom-class.",
                            "id": 1289
                        }
                    ],
                    "Code": [
                        {
                            "code": "\"// src/components/ToggleSwitch.test.js\\n\\nimport React from 'react';\\nimport { render, screen, fireEvent } from '@testing-library/react';\\nimport ToggleSwitch from './ToggleSwitch';\\n\\n// Test if the component renders with the initial state \\\"Off\\\"\\ntest('renders with initial state \\\"Off\\\"', () => {\\n  render(<ToggleSwitch onToggle={() => {}} initialState={false} />);\\n  const toggleElement = screen.getByRole('button', { name: /off/i });\\n  expect(toggleElement).toBeInTheDocument();\\n  expect(toggleElement).toHaveTextContent('Off');\\n  expect(toggleElement).toHaveClass('off');\\n});\\n\\n// Test if the component renders with the initial state \\\"On\\\"\\ntest('renders with initial state \\\"On\\\"', () => {\\n  render(<ToggleSwitch onToggle={() => {}} initialState={true} />);\\n  const toggleElement = screen.getByRole('button', { name: /on/i });\\n  expect(toggleElement).toBeInTheDocument();\\n  expect(toggleElement).toHaveTextContent('On');\\n  expect(toggleElement).toHaveClass('on');\\n});\\n\\n// Test if the component toggles state from \\\"Off\\\" to \\\"On\\\" when clicked\\ntest('toggles state from \\\"Off\\\" to \\\"On\\\" when clicked', () => {\\n  const handleToggle = jest.fn();\\n  render(<ToggleSwitch onToggle={handleToggle} initialState={false} />);\\n  const toggleElement = screen.getByRole('button', { name: /off/i });\\n  fireEvent.click(toggleElement);\\n  expect(handleToggle).toHaveBeenCalledWith(true);\\n  expect(toggleElement).toHaveTextContent('On');\\n  expect(toggleElement).toHaveClass('on');\\n});\\n\\n// Test if the component toggles state from \\\"On\\\" to \\\"Off\\\" when clicked\\ntest('toggles state from \\\"On\\\" to \\\"Off\\\" when clicked', () => {\\n  const handleToggle = jest.fn();\\n  render(<ToggleSwitch onToggle={handleToggle} initialState={true} />);\\n  const toggleElement = screen.getByRole('button', { name: /on/i });\\n  fireEvent.click(toggleElement);\\n  expect(handleToggle).toHaveBeenCalledWith(false);\\n  expect(toggleElement).toHaveTextContent('Off');\\n  expect(toggleElement).toHaveClass('off');\\n});\\n\\n// Test if the component has the correct class when a className is provided\\ntest('has correct class when className is provided', () => {\\n  render(<ToggleSwitch onToggle={() => {}} className=\\\"custom-class\\\" />);\\n  const toggleElement = screen.getByRole('button');\\n  expect(toggleElement).toHaveClass('toggle-switch custom-class');\\n});\\n\\n// Test if the component does not toggle when disabled\\ntest('does not toggle state when disabled', () => {\\n  const handleToggle = jest.fn();\\n  render(<ToggleSwitch onToggle={handleToggle} initialState={false} />);\\n  const toggleElement = screen.getByRole('button', { name: /off/i });\\n\\n  // Simulate click but don't expect state change because it should be disabled\\n  fireEvent.click(toggleElement);\\n  expect(toggleElement).toHaveTextContent('Off');\\n  expect(toggleElement).toHaveClass('off');\\n  expect(handleToggle).toHaveBeenCalledTimes(1);\\n});\\n\\n\"",
                            "id": 1625
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 1059,
            "articleName": "React Card Component Testing ",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 1,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JEST",
            "video_url": null,
            "video_id": 1054,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 1066,
                    "Prompt": "\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './Card.css'; // Assuming you have some styles\n\nconst Card = ({ title, imageSrc, description }) => {\n  return (\n    <div className=\"card\">\n      <img src={imageSrc} alt={title} className=\"card-image\" />\n      <div className=\"card-content\">\n        <h2 className=\"card-title\">{title}</h2>\n        <p className=\"card-description\">{description}</p>\n      </div>\n    </div>\n  );\n};\n\nCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  imageSrc: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n};\n\nexport default Card;\nwrite unit test cases of that file ",
                    "PromptType": "Code",
                    "lang": "javascript",
                    "PromptDesc": [
                        {
                            "desc": "To write unit test cases for the Card component, we will use the React Testing Library along with Jest. The Card component tests will ensure that:\n\nThe component renders correctly with given props.\nThe title, image, and description are displayed as expected.\nThe image's src and alt attributes are correctly set based on the props.\nFirst, make sure you have React Testing Library and Jest installed. You can add them to your project if they're not already installed by running:",
                            "id": 1291
                        },
                        {
                            "desc": "Then, create a test file for the Card component named Card.test.js in the same directory as the Card component, i.e., src/components.\n\nCard.test.js",
                            "id": 1292
                        },
                        {
                            "desc": "Explanation:\nImports:\n\nWe import React, and necessary functions (render and screen) from @testing-library/react.\n@testing-library/jest-dom/extend-expect is imported to extend Jest's expect functionality with custom matchers.\nTest Data:\n\ntestProps is defined with title, imageSrc, and description to be used across tests.\nTests:\n\nRenders Correctly with Given Props:\nWe render the Card component with testProps.\nWe check if the title, image, and description are rendered correctly.\nWe assert that the image's src and alt attributes match the provided props.\nApplies Styles Correctly:\nWe render the Card component and use container.querySelector to verify that the appropriate classes (.card, .card-image, and .card-content) are applied to the respective elements.",
                            "id": 1293
                        }
                    ],
                    "Code": [
                        {
                            "code": "\"npm install --save-dev @testing-library/react @testing-library/jest-dom jest\\n\"",
                            "id": 1628
                        },
                        {
                            "code": "\"// src/components/Card.test.js\\n\\nimport React from 'react';\\nimport { render, screen } from '@testing-library/react';\\nimport '@testing-library/jest-dom/extend-expect';\\nimport Card from './Card';\\n\\n// Test data\\nconst testProps = {\\n  title: 'Test Card Title',\\n  imageSrc: 'https://via.placeholder.com/150',\\n  description: 'This is a test description for the card component.'\\n};\\n\\ndescribe('Card Component', () => {\\n  test('renders correctly with given props', () => {\\n    render(<Card {...testProps} />);\\n    \\n    // Check if the title is rendered correctly\\n    const titleElement = screen.getByText(testProps.title);\\n    expect(titleElement).toBeInTheDocument();\\n\\n    // Check if the image is rendered with the correct src and alt attributes\\n    const imageElement = screen.getByAltText(testProps.title);\\n    expect(imageElement).toBeInTheDocument();\\n    expect(imageElement).toHaveAttribute('src', testProps.imageSrc);\\n    expect(imageElement).toHaveAttribute('alt', testProps.title);\\n\\n    // Check if the description is rendered correctly\\n    const descriptionElement = screen.getByText(testProps.description);\\n    expect(descriptionElement).toBeInTheDocument();\\n  });\\n\\n  test('applies styles correctly', () => {\\n    const { container } = render(<Card {...testProps} />);\\n    \\n    // Check if the card has the correct class\\n    const cardElement = container.querySelector('.card');\\n    expect(cardElement).toBeInTheDocument();\\n\\n    // Check if the image has the correct class\\n    const imageElement = container.querySelector('.card-image');\\n    expect(imageElement).toBeInTheDocument();\\n\\n    // Check if the content wrapper has the correct class\\n    const contentElement = container.querySelector('.card-content');\\n    expect(contentElement).toBeInTheDocument();\\n  });\\n});\\n\"",
                            "id": 1629
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 1060,
            "articleName": "FormHandling React Component Testing ",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 1,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JEST",
            "video_url": null,
            "video_id": 1055,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 554,
                    "Prompt": "// FormHandlingComponent.js\n\nimport React, { useState } from 'react';\n\nconst FormHandlingComponent = () => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    message: ''\n  });\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // You can handle form submission logic here, like sending data to a server\n\n    // For this example, let's log the form data to the console\n    console.log(formData);\n\n    // Reset the form after submission\n    setFormData({ name: '', email: '', message: '' });\n  };\n\n  return (\n    <div>\n      <h2>Form Handling Example</h2>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"name\">Name:</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            value={formData.name}\n            onChange={handleInputChange}\n            required\n          />\n        </div>\n        <div>\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleInputChange}\n            required\n          />\n        </div>\n        <div>\n          <label htmlFor=\"message\">Message:</label>\n          <textarea\n            id=\"message\"\n            name=\"message\"\n            value={formData.message}\n            onChange={handleInputChange}\n            rows=\"4\"\n            required\n          ></textarea>\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n};\n\nexport default FormHandlingComponent;\nwrite unit test cases of that file ",
                    "PromptType": "Code",
                    "lang": "javascript",
                    "PromptDesc": [
                        {
                            "desc": "To write unit tests for the FormHandlingComponent, we'll use Jest and React Testing Library. The tests will focus on verifying that:\n\nInput fields can be filled out.\nForm submission triggers the correct function.\nForm state resets after submission.\nStep 1: Install Required Packages\nMake sure you have Jest and React Testing Library installed in your project. If not, you can install them using npm:",
                            "id": 744
                        },
                        {
                            "desc": "Step 2: Write Unit Tests\nCreate a file named FormHandlingComponent.test.js to write your tests for FormHandlingComponent. Here’s how you can structure your tests:\n\n",
                            "id": 745
                        },
                        {
                            "desc": "Explanation:\nMocking console.log: Before each test (beforeEach), we use jest.spyOn(console, 'log') to mock console.log. The mock implementation (mockImplementation(() => {})) ensures that console.log doesn't actually log anything to the console during tests.\nRestoring console.log: After each test (afterEach), we restore console.log to its original implementation (mockRestore()) to prevent interference with other tests.",
                            "id": 746
                        }
                    ],
                    "Code": [
                        {
                            "code": "\"npm install --save-dev jest @testing-library/react @testing-library/jest-dom\\n\"",
                            "id": 887
                        },
                        {
                            "code": "\"// FormHandlingComponent.test.js\\n\\nimport React from 'react';\\nimport { render, fireEvent, screen } from '@testing-library/react';\\nimport FormHandlingComponent from '../components/FormHandlingComponent';\\n\\ndescribe('FormHandlingComponent', () => {\\n  beforeEach(() => {\\n    jest.spyOn(console, 'log').mockImplementation(() => {}); // Mock console.log\\n  });\\n\\n  afterEach(() => {\\n    console.log.mockRestore(); // Restore console.log after each test\\n  });\\n\\n  test('renders form with initial state', () => {\\n    render(<FormHandlingComponent />);\\n\\n    // Check if form inputs are rendered and initially empty\\n    expect(screen.getByLabelText('Name:')).toHaveValue('');\\n    expect(screen.getByLabelText('Email:')).toHaveValue('');\\n    expect(screen.getByLabelText('Message:')).toHaveValue('');\\n  });\\n\\n  test('updates form state on input change', () => {\\n    render(<FormHandlingComponent />);\\n\\n    // Simulate user typing into the inputs\\n    fireEvent.change(screen.getByLabelText('Name:'), { target: { value: 'John Doe' } });\\n    fireEvent.change(screen.getByLabelText('Email:'), { target: { value: 'john.doe@example.com' } });\\n    fireEvent.change(screen.getByLabelText('Message:'), { target: { value: 'Hello, this is a test message.' } });\\n\\n    // Verify if the input values are updated correctly in the component state\\n    expect(screen.getByLabelText('Name:')).toHaveValue('John Doe');\\n    expect(screen.getByLabelText('Email:')).toHaveValue('john.doe@example.com');\\n    expect(screen.getByLabelText('Message:')).toHaveValue('Hello, this is a test message.');\\n  });\\n\\n  test('submits form with correct data and resets state', () => {\\n    render(<FormHandlingComponent />);\\n\\n    // Simulate user filling out the form\\n    fireEvent.change(screen.getByLabelText('Name:'), { target: { value: 'Jane Smith' } });\\n    fireEvent.change(screen.getByLabelText('Email:'), { target: { value: 'jane.smith@example.com' } });\\n    fireEvent.change(screen.getByLabelText('Message:'), { target: { value: 'Test message for submission.' } });\\n\\n    // Simulate form submission\\n    fireEvent.click(screen.getByText('Submit'));\\n\\n    // Verify that handleSubmit function is called (through console.log mock)\\n    expect(console.log).toHaveBeenCalledWith({\\n      name: 'Jane Smith',\\n      email: 'jane.smith@example.com',\\n      message: 'Test message for submission.'\\n    });\\n\\n    // Check if form inputs are reset after submission\\n    expect(screen.getByLabelText('Name:')).toHaveValue('');\\n    expect(screen.getByLabelText('Email:')).toHaveValue('');\\n    expect(screen.getByLabelText('Message:')).toHaveValue('');\\n  });\\n});\\n\"",
                            "id": 888
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 1061,
            "articleName": "React AuthComponent Testing ",
            "createdDate": "2024-08-05T06:22:48.341Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 1,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JEST",
            "video_url": null,
            "video_id": 1056,
            "image_url": null,
            "image_id": null,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 1067,
                    "Prompt": "import React, { useState } from 'react';\n\nconst AuthComponent = () => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [credentials, setCredentials] = useState({ username: '', password: '' });\n  const [error, setError] = useState('');\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setCredentials({ ...credentials, [name]: value });\n  };\n\n  const handleLogin = (e) => {\n    e.preventDefault();\n    // Simulate a login process\n    if (credentials.username === 'user' && credentials.password === 'pass') {\n      setIsAuthenticated(true);\n      setError('');\n    } else {\n      setError('Invalid username or password');\n    }\n  };\n\n  const handleLogout = () => {\n    setIsAuthenticated(false);\n    setCredentials({ username: '', password: '' });\n  };\n\n  return (\n    <div>\n      {isAuthenticated ? (\n        <div>\n          <h2>Welcome, {credentials.username}!</h2>\n          <button onClick={handleLogout}>Logout</button>\n        </div>\n      ) : (\n        <div>\n          <h2>Login</h2>\n          <form onSubmit={handleLogin}>\n            <div>\n              <label htmlFor=\"username\">Username:</label>\n              <input\n                type=\"text\"\n                id=\"username\"\n                name=\"username\"\n                value={credentials.username}\n                onChange={handleInputChange}\n                required\n              />\n            </div>\n            <div>\n              <label htmlFor=\"password\">Password:</label>\n              <input\n                type=\"password\"\n                id=\"password\"\n                name=\"password\"\n                value={credentials.password}\n                onChange={handleInputChange}\n                required\n              />\n            </div>\n            {error && <p className=\"error\">{error}</p>}\n            <button type=\"submit\">Login</button>\n          </form>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AuthComponent;\nwrite unit test cases of that file ",
                    "PromptType": "Code",
                    "lang": null,
                    "PromptDesc": [
                        {
                            "desc": "Sure, let's write unit test cases for the simplified AuthComponent. We'll use the @testing-library/react and jest for our testing framework. The test cases will cover the following scenarios:\n\nRendering the login form when not authenticated.\nHandling login attempts with valid and invalid credentials.\nDisplaying the welcome message upon successful login.\nLogging out and returning to the login screen.\nUnit Test Cases for AuthComponent\nAuthComponent.test.js",
                            "id": 1294
                        },
                        {
                            "desc": "Explanation of Tests:\nrenders login form when not authenticated:\n\nRenders the component and verifies that the login form (username, password inputs, and login button) is displayed.\ndisplays error message on invalid login:\n\nFills in the login form with invalid credentials.\nSubmits the form and checks if the error message (\"Invalid username or password\") is displayed.\nauthenticates and displays welcome message on valid login:\n\nFills in the login form with valid credentials.\nSubmits the form and checks if the welcome message and logout button are displayed.\nlogs out and displays login form again:\n\nLogs in with valid credentials to authenticate.\nClicks the logout button and verifies that the login form is displayed again.",
                            "id": 1295
                        }
                    ],
                    "Code": [
                        {
                            "code": "\"// AuthComponent.test.js\\n\\nimport React from 'react';\\nimport { render, fireEvent, screen } from '@testing-library/react';\\nimport AuthComponent from '../components/AuthenticationFlow';\\ndescribe('AuthComponent', () => {\\n  test('renders login form when not authenticated', () => {\\n    render(<AuthComponent />);\\n\\n    // Check if the login form is displayed\\n    expect(screen.getByRole('heading', { name: /login/i })).toBeInTheDocument();\\n    expect(screen.getByLabelText(/username/i)).toBeInTheDocument();\\n    expect(screen.getByLabelText(/password/i)).toBeInTheDocument();\\n    expect(screen.getByRole('button', { name: /login/i })).toBeInTheDocument();\\n  });\\n\\n  test('displays error message on invalid login', () => {\\n    render(<AuthComponent />);\\n\\n    // Simulate entering invalid credentials\\n    fireEvent.change(screen.getByLabelText(/username/i), { target: { value: 'invalidUser' } });\\n    fireEvent.change(screen.getByLabelText(/password/i), { target: { value: 'wrongPass' } });\\n\\n    // Simulate form submission\\n    fireEvent.click(screen.getByRole('button', { name: /login/i }));\\n\\n    // Check for error message\\n    expect(screen.getByText(/invalid username or password/i)).toBeInTheDocument();\\n  });\\n\\n  test('authenticates and displays welcome message on valid login', () => {\\n    render(<AuthComponent />);\\n\\n    // Simulate entering valid credentials\\n    fireEvent.change(screen.getByLabelText(/username/i), { target: { value: 'user' } });\\n    fireEvent.change(screen.getByLabelText(/password/i), { target: { value: 'pass' } });\\n\\n    // Simulate form submission\\n    fireEvent.click(screen.getByRole('button', { name: /login/i }));\\n\\n    // Check for welcome message and logout button\\n    expect(screen.getByText(/welcome, user!/i)).toBeInTheDocument();\\n    expect(screen.getByRole('button', { name: /logout/i })).toBeInTheDocument();\\n  });\\n\\n  test('logs out and displays login form again', () => {\\n    render(<AuthComponent />);\\n\\n    // Simulate entering valid credentials and logging in\\n    fireEvent.change(screen.getByLabelText(/username/i), { target: { value: 'user' } });\\n    fireEvent.change(screen.getByLabelText(/password/i), { target: { value: 'pass' } });\\n    fireEvent.click(screen.getByRole('button', { name: /login/i }));\\n\\n    // Simulate logging out\\n    fireEvent.click(screen.getByRole('button', { name: /logout/i }));\\n\\n    // Check if the login form is displayed again\\n    expect(screen.getByRole('heading', { name: /login/i })).toBeInTheDocument();\\n    expect(screen.getByLabelText(/username/i)).toBeInTheDocument();\\n    expect(screen.getByLabelText(/password/i)).toBeInTheDocument();\\n    expect(screen.getByRole('button', { name: /login/i })).toBeInTheDocument();\\n  });\\n});\\n\"",
                            "id": 1630
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 1496,
            "articleName": "test",
            "createdDate": "2025-01-10T09:02:33.870Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 4,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "KARMA",
            "video_url": null,
            "video_id": 1451,
            "image_url": null,
            "image_id": 42,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 1322,
                    "Prompt": "test",
                    "PromptType": "text",
                    "lang": "json",
                    "PromptDesc": [
                        {
                            "desc": "test",
                            "id": 1635
                        }
                    ],
                    "Code": [
                        {
                            "code": "\"test\"",
                            "id": 2008
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 1504,
            "articleName": "create Notification checking",
            "createdDate": "2025-01-15T07:03:49.340Z",
            "category_id": 5,
            "sub_category_id": 4,
            "tech_id": 1,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT TESTING",
            "tech_name": "JEST",
            "video_url": null,
            "video_id": 1459,
            "image_url": null,
            "image_id": 50,
            "document_url": null,
            "document_id": null,
            "is_private": false,
            "repository_name": null,
            "instruction": null,
            "prompts": [
                {
                    "PromptId": 1319,
                    "Prompt": "create Notification checking",
                    "PromptType": "text",
                    "lang": "plaintext",
                    "PromptDesc": [
                        {
                            "desc": "create Notification checking",
                            "id": 1632
                        }
                    ],
                    "Code": [
                        {
                            "code": "\"create Notification checking\"",
                            "id": 2005
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 1584,
            "articleName": "Generate a sample test payload by referring the RAML file",
            "createdDate": "2025-05-09T15:35:08.596Z",
            "category_id": 5,
            "sub_category_id": 19,
            "tech_id": 20,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT_TESTING_MIDDLEWARE",
            "tech_name": "MULESOFT",
            "video_url": "https://genaiexperiencestorage.blob.core.windows.net/prompt-lib/ramlWithEndpoints.mp4?sv=2024-08-04&st=2025-05-09T15%3A35%3A08Z&se=2027-05-11T15%3A35%3A08Z&sr=b&sp=r&sig=qZvZwu6eDnp2UM7Oe6%2FGqKTGYUfDS%2BlwZqRbj9hascY%3D",
            "video_id": 1520,
            "image_url": null,
            "image_id": 96,
            "document_url": null,
            "document_id": 3,
            "is_private": false,
            "repository_name": null,
            "instruction": "You are an expert in analysing the RAML and generating the payload from the RAML. I am providing the RAML which will be used as an asset for designing my API. Please anlayze the RAML and generate the sample payload which will honour all the rules inside the RAML .You can refer the link for any doubts related to RAML https://raml.org/developers/raml-100-tutorial",
            "prompts": [
                {
                    "PromptId": 1440,
                    "Prompt": "Please generate the payloads for all the endpoint in the RAML by referring the file {Raml with two enpoints}.",
                    "PromptType": "text",
                    "lang": "mulesoft",
                    "PromptDesc": [],
                    "Code": [
                        {
                            "code": "Based on the provided RAML file, I will generate sample payloads for the /orders and /customer endpoints.\n\nEndpoint: /orders\nMethod: POST Description: Create a new order\n\nSample Request Payload:\njson\n{\n  \"orderId\": \"12345\",\n  \"orderDate\": \"2023-10-01T10:00:00Z\",\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"Springfield\",\n    \"state\": \"IL\",\n    \"zipCode\": 62704,\n    \"country\": \"USA\"\n  },\n  \"billingAddress\": {\n    \"street\": \"456 Elm St\",\n    \"city\": \"Springfield\",\n    \"state\": \"IL\",\n    \"zipCode\": 62704,\n    \"country\": \"USA\"\n  },\n  \"items\": [\n    {\n      \"itemId\": \"item001\",\n      \"description\": \"Laptop\",\n      \"quantity\": 1,\n      \"price\": 999.99\n    },\n    {\n      \"itemId\": \"item002\",\n      \"description\": \"Mouse\",\n      \"quantity\": 2,\n      \"price\": 19.99\n    }\n  ],\n  \"totalAmount\": 1039.97,\n  \"paymentMethod\": \"credit_card\"\n}\nSample Response Payload (201 Created):\njson\n{\n  \"orderId\": \"12345\",\n  \"orderDate\": \"2023-10-01T10:00:00Z\",\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"Springfield\",\n    \"state\": \"IL\",\n    \"zipCode\": 62704,\n    \"country\": \"USA\"\n  },\n  \"billingAddress\": {\n    \"street\": \"456 Elm St\",\n    \"city\": \"Springfield\",\n    \"state\": \"IL\",\n    \"zipCode\": 62704,\n    \"country\": \"USA\"\n  },\n  \"items\": [\n    {\n      \"itemId\": \"item001\",\n      \"description\": \"Laptop\",\n      \"quantity\": 1,\n      \"price\": 999.99\n    },\n    {\n      \"itemId\": \"item002\",\n      \"description\": \"Mouse\",\n      \"quantity\": 2,\n      \"price\": 19.99\n    }\n  ],\n  \"totalAmount\": 1039.97,\n  \"paymentMethod\": \"credit_card\"\n}\nEndpoint: /customer\nMethod: POST Description: Create a new customer record\n\nSample Request Payload:\njson\n{\n  \"name\": \"John Doe\",\n  \"address\": {\n    \"street\": \"789 Maple Ave\",\n    \"city\": \"Springfield\",\n    \"state\": \"IL\",\n    \"zipCode\": 62704,\n    \"country\": \"USA\"\n  },\n  \"emailId\": \"john.doe@example.com\"\n}\nSample Response Payload (201 Created):\njson\n{\n  \"name\": \"John Doe\",\n  \"address\": {\n    \"street\": \"789 Maple Ave\",\n    \"city\": \"Springfield\",\n    \"state\": \"IL\",\n    \"zipCode\": 62704,\n    \"country\": \"USA\"\n  },\n  \"emailId\": \"john.doe@example.com\"\n}\nThese payloads are generated in compliance with the rules and structure defined in the provided RAML file. If you need further assistance or additional endpoints, please let me know!\n\nReference Doc:\n\nRaml with two enpoints.txt\n",
                            "id": 2240
                        }
                    ]
                }
            ]
        },
        {
            "articleId": 1587,
            "articleName": "Generate a sample payload by referring the RAML file.",
            "createdDate": "2025-05-14T08:40:04.388Z",
            "category_id": 5,
            "sub_category_id": 19,
            "tech_id": 20,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT_TESTING_MIDDLEWARE",
            "tech_name": "MULESOFT",
            "video_url": null,
            "video_id": 1523,
            "image_url": null,
            "image_id": 99,
            "document_url": null,
            "document_id": 6,
            "is_private": false,
            "repository_name": null,
            "instruction": "You are an expert in analysing the RAML and generating the payload from the RAML. I am providing the RAML which will be used as an asset for designing my API. Please anlayze the RAML and generate the sample payload which will honour all the rules inside the RAML .You can refer the link for any doubts related to RAML\nhttps://raml.org/developers/raml-100-tutorial",
            "prompts": [
                {
                    "PromptId": 1443,
                    "Prompt": "Please generate the payloads for all the endpoint in the RAML\n",
                    "PromptType": "text",
                    "lang": "mulesoft",
                    "PromptDesc": [
                        {
                            "desc": "RAML to Sample Payload",
                            "id": 1851
                        }
                    ],
                    "Code": []
                }
            ]
        },
        {
            "articleId": 1591,
            "articleName": "Test Data generation for the given XSD file",
            "createdDate": "2025-05-29T12:16:36.604Z",
            "category_id": 5,
            "sub_category_id": 19,
            "tech_id": 20,
            "is_approved": 1,
            "category_name": "UNIT TESTING",
            "sub_category_name": "UNIT_TESTING_MIDDLEWARE",
            "tech_name": "MULESOFT",
            "video_url": null,
            "video_id": 1527,
            "image_url": null,
            "image_id": 103,
            "document_url": null,
            "document_id": 10,
            "is_private": false,
            "repository_name": null,
            "instruction": "You are an expert in analysing the XSD and generating the payload from the XSD. I am providing the XSD which will be used as an asset for designing my API. Please anlayze the XSD and generate the sample payload which will honour all the rules inside the XSD .You can refer the link for any doubts related to XSD \nhttps://www.tutorialspoint.com/xsd/index.htm",
            "prompts": [
                {
                    "PromptId": 1447,
                    "Prompt": "Please generate 5 xml sample files for the input xsd file.These files will be used for unit testing ",
                    "PromptType": "text",
                    "lang": "mulesoft",
                    "PromptDesc": [
                        {
                            "desc": "\nThis prompt will be used to generate the sample xml files which will validate the xsd file.\nXSD to Sample Payload",
                            "id": 1856
                        }
                    ],
                    "Code": []
                }
            ]
        }
    ]
}